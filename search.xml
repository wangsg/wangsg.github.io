<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
    
    <entry>
      <title><![CDATA[Activity启动过程]]></title>
      <url>http://yoursite.com/2016/07/06/Activity%E5%90%AF%E5%8A%A8%E8%BF%87%E7%A8%8B/</url>
      <content type="html"></content>
    </entry>
    
    <entry>
      <title><![CDATA[自定义View之贝塞尔曲线]]></title>
      <url>http://yoursite.com/2016/07/05/%E8%87%AA%E5%AE%9A%E4%B9%89View%E4%B9%8B%E8%B4%9D%E5%A1%9E%E5%B0%94%E6%9B%B2%E7%BA%BF/</url>
      <content type="html"><![CDATA[<p>贝塞尔曲线的百度百科：<br><a href="http://baike.baidu.com/link?url=pm6ei09WGXl7OiTMU_gQV3wUVMKPyBpb-aKjyiUUyaj9iG90fHhjblsGAl9cLDngFGjcm9E1NhhhFEn3aoSiq_" target="_blank" rel="external">贝塞尔曲线</a><br>贝塞尔曲线的应用例子：</p>
<blockquote>
<p>   •    QQ小红点拖拽效果<br>    •    一些炫酷的下拉刷新控件<br>    •    阅读软件的翻书效果<br>    •    一些平滑的折线图的制作<br>    •    很多炫酷的动画效果</p>
</blockquote>
<h3 id="u4E00_u9636_u66F2_u7EBF_u539F_u7406_uFF1A"><a href="#u4E00_u9636_u66F2_u7EBF_u539F_u7406_uFF1A" class="headerlink" title="一阶曲线原理："></a>一阶曲线原理：</h3><p>一阶曲线是没有控制点的，仅有两个数据点(A 和 B)，最终效果一个线段。</p>
<h2 id=""><a href="#" class="headerlink" title="<img src=" https:="" camo.githubusercontent.com="" 373298cbd63fcfa611e5d9a7c618c87bebc61d1d="" 687474703a2f2f7777312e73696e61696d672e636e2f6c617267652f30303558746469326a77316633356f6630343577386a3330386330647771327a2e6a7067"="" alt="">"></a><img src="https://camo.githubusercontent.com/373298cbd63fcfa611e5d9a7c618c87bebc61d1d/687474703a2f2f7777312e73696e61696d672e636e2f6c617267652f30303558746469326a77316633356f6630343577386a3330386330647771327a2e6a7067" alt=""></h2><blockquote>
<p>图片来自维基百科<br><img src="https://camo.githubusercontent.com/71496535e042ea905274315ddafda0defd1de8e1/68747470733a2f2f75706c6f61642e77696b696d656469612e6f72672f77696b6970656469612f636f6d6d6f6e732f302f30302f422543332541397a6965725f315f6269672e676966" alt=""></p>
</blockquote>
<h3 id="u4E8C_u9636_u66F2_u7EBF_u539F_u7406_uFF1A"><a href="#u4E8C_u9636_u66F2_u7EBF_u539F_u7406_uFF1A" class="headerlink" title="二阶曲线原理："></a>二阶曲线原理：</h3><p>二次方贝兹曲线的路径由给定点P0、P1、P2的函数B（t）追踪：<br>B(t) = (1 - t)^2 <em> P0 + 2t </em> (1 - t) <em> P1 + t^2 </em> P2, t ∈ [0,1]<br>二阶曲线由两个数据点(A 和 C)，一个控制点(B)来描述曲线状态，大致如下：<br><img src="https://camo.githubusercontent.com/b43777aabbfe01b567eadc6cc0fc126879da89f0/687474703a2f2f7777322e73696e61696d672e636e2f6c617267652f30303558746469326a7731663336316f6a653668316a333038633064776467302e6a7067" alt=""><br>连接DE，取点F，使得: <img src="https://camo.githubusercontent.com/1f944e9726f64e7c424678f5ee05a404c8bbe7ff/687474703a2f2f63686172742e676f6f676c65617069732e636f6d2f63686172743f6368743d74782663686c3d253543667261632537424144253744253742414225374425323025334425323025354366726163253742424525374425374242432537442532302533442532302535436672616325374244462537442537424445253744" alt=""><br>这样获取到的点F就是贝塞尔曲线上的一个点，动态过程如下：<br><img src="https://camo.githubusercontent.com/e42e6067ba0955631e3207a6fbd4b24f4a26132f/68747470733a2f2f75706c6f61642e77696b696d656469612e6f72672f77696b6970656469612f636f6d6d6f6e732f332f33642f422543332541397a6965725f325f6269672e676966" alt=""></p>
<h3 id="u4E09_u9636_u66F2_u7EBF_u539F_u7406_uFF1A"><a href="#u4E09_u9636_u66F2_u7EBF_u539F_u7406_uFF1A" class="headerlink" title="三阶曲线原理："></a>三阶曲线原理：</h3><p>B(t) = P0 <em> (1-t)^3 + 3 </em> P1 <em> t </em> (1-t)^2 + 3 <em> P2 </em> t^2 <em> (1-t) + P3 </em> t^3<br>三阶曲线由两个数据点(A 和 D)，两个控制点(B 和 C)来描述曲线状态，如下：<br><img src="https://camo.githubusercontent.com/c71bfd45b2ea826f1b15642870c7c52aef03b097/687474703a2f2f7777322e73696e61696d672e636e2f6c617267652f30303558746469326777316633366d7965716375356a333038633064776467322e6a7067" alt=""><br>动态图：<br><img src="https://camo.githubusercontent.com/e8db61bc38f255f4d1b701126f6920688c8e5de4/68747470733a2f2f75706c6f61642e77696b696d656469612e6f72672f77696b6970656469612f636f6d6d6f6e732f642f64622f422543332541397a6965725f335f6269672e676966" alt=""></p>
<p>一阶曲线是一条线段，非常简单，不详细讲解了。</p>
<blockquote>
<p>首先，两个数据点是控制贝塞尔曲线开始和结束的位置，比较容易理解，而控制点则是控制贝塞尔的弯曲状态，相对来说比较难以理解，所以本示例重点在于理解贝塞尔曲线弯曲状态与控制点的关系.</p>
</blockquote>
<p><img src="https://camo.githubusercontent.com/8234183ba3ba33f47f83d233fce17d2775c0b98d/687474703a2f2f7777322e73696e61696d672e636e2f6c617267652f30303558746469326777316633397675676a67307667333038633065383430392e676966" alt=""></p>
<blockquote>
<p>为了更加容易看出控制点与曲线弯曲程度的关系，上图中绘制出了辅助点和辅助线，从上面的动态图可以看出，贝塞尔曲线在动态变化过程中有类似于橡皮筋一样的弹性效果，因此在制作一些弹性效果的时候很常用。</p>
</blockquote>
<figure class="highlight"><figcaption><span>class Bezier extends View &#123;</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#10;    private Paint mPaint;&#10;    private int centerX, centerY;&#10;&#10;    private PointF start, end, control;&#10;&#10;    public Bessel1(Context context) &#123;&#10;        super(context);&#10;        mPaint = new Paint();&#10;        mPaint.setColor(Color.BLACK);&#10;        mPaint.setStrokeWidth(8);&#10;        mPaint.setStyle(Paint.Style.STROKE);&#10;        mPaint.setTextSize(60);&#10;&#10;        start = new PointF(0,0);&#10;        end = new PointF(0,0);&#10;        control = new PointF(0,0);&#10;    &#125;&#10;&#10;    @Override&#10;    protected void onSizeChanged(int w, int h, int oldw, int oldh) &#123;&#10;        super.onSizeChanged(w, h, oldw, oldh);&#10;        centerX = w/2;&#10;        centerY = h/2;&#10;&#10;        // &#21021;&#22987;&#21270;&#25968;&#25454;&#28857;&#21644;&#25511;&#21046;&#28857;&#30340;&#20301;&#32622;&#10;        start.x = centerX-200;&#10;        start.y = centerY;&#10;        end.x = centerX+200;&#10;        end.y = centerY;&#10;        control.x = centerX;&#10;        control.y = centerY-100;&#10;    &#125;&#10;&#10;    @Override&#10;    public boolean onTouchEvent(MotionEvent event) &#123;&#10;        // &#26681;&#25454;&#35302;&#25720;&#20301;&#32622;&#26356;&#26032;&#25511;&#21046;&#28857;&#65292;&#24182;&#25552;&#31034;&#37325;&#32472;&#10;        control.x = event.getX();&#10;        control.y = event.getY();&#10;        invalidate();&#10;        return true;&#10;    &#125;&#10;&#10;    @Override&#10;    protected void onDraw(Canvas canvas) &#123;&#10;        super.onDraw(canvas);&#10;&#10;        // &#32472;&#21046;&#25968;&#25454;&#28857;&#21644;&#25511;&#21046;&#28857;&#10;        mPaint.setColor(Color.GRAY);&#10;        mPaint.setStrokeWidth(20);&#10;        canvas.drawPoint(start.x,start.y,mPaint);&#10;        canvas.drawPoint(end.x,end.y,mPaint);&#10;        canvas.drawPoint(control.x,control.y,mPaint);&#10;&#10;        // &#32472;&#21046;&#36741;&#21161;&#32447;&#10;        mPaint.setStrokeWidth(4);&#10;        canvas.drawLine(start.x,start.y,control.x,control.y,mPaint);&#10;        canvas.drawLine(end.x,end.y,control.x,control.y,mPaint);&#10;&#10;        // &#32472;&#21046;&#36125;&#22622;&#23572;&#26354;&#32447;&#10;        mPaint.setColor(Color.RED);&#10;        mPaint.setStrokeWidth(8);&#10;&#10;        Path path = new Path();&#10;&#10;        path.moveTo(start.x,start.y);&#10;        path.quadTo(control.x,control.y,end.x,end.y);&#10;&#10;        canvas.drawPath(path, mPaint);&#10;    &#125;&#10;&#125;</span><br></pre></td></tr></table></figure>
<p>三阶贝塞尔:<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">path.cubicTo(control1.x, control1.y, control2.x,control2.y, end.x, end.y);</span><br></pre></td></tr></table></figure></p>
<h3 id="u5982_u4F55_u7528_u8D1D_u585E_u5C14_u66F2_u7EBF_u753B_u4E00_u4E2A_u5706"><a href="#u5982_u4F55_u7528_u8D1D_u585E_u5C14_u66F2_u7EBF_u753B_u4E00_u4E2A_u5706" class="headerlink" title="如何用贝塞尔曲线画一个圆"></a>如何用贝塞尔曲线画一个圆</h3><p>stackoverflow上边有个方案<a href="http://stackoverflow.com/questions/1734745/how-to-create-circle-with-b%C3%A9zier-curves" target="_blank" rel="external">How to create circle with Bézier curves?</a><br>看下图：<br><img src="http://i.stack.imgur.com/aEsuA.png" alt=""><br>数值c约等于0.551915024494f<br><img src="http://static.zybuluo.com/devinshine/rq9l1712aeyo62l0wsyetj32/jiangjietu.png" alt=""><br>如果我们打算用贝塞尔曲线来画这么一个圆的话，我们需要知道这个圆的半径，以及图中的M的值，知道这两个值的话就能够知道图中12个点的坐标，知道坐标就能够用Path的cubicTo方法来使用贝塞尔曲线画出圆了。<br><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">mPath</span><span class="class">.moveTo</span>(<span class="tag">p0</span><span class="class">.x</span>,<span class="tag">p0</span><span class="class">.y</span>);</span><br><span class="line"><span class="tag">mPath</span><span class="class">.cubicTo</span>(<span class="tag">p1</span><span class="class">.x</span>, <span class="tag">p1</span><span class="class">.y</span>, <span class="tag">p2</span><span class="class">.x</span>, <span class="tag">p2</span><span class="class">.y</span>, <span class="tag">p3</span><span class="class">.x</span>,<span class="tag">p3</span><span class="class">.y</span>);</span><br></pre></td></tr></table></figure></p>
<h4 id="u5982_u4F55_u7528_u8D1D_u585E_u5C14_u5B9E_u73B0_u9ECF_u6027_u56ED"><a href="#u5982_u4F55_u7528_u8D1D_u585E_u5C14_u5B9E_u73B0_u9ECF_u6027_u56ED" class="headerlink" title="如何用贝塞尔实现黏性园"></a>如何用贝塞尔实现黏性园</h4><p><img src="http://static.zybuluo.com/devinshine/2sp9u008ws19xd1vdfx7k43m/diorKTU84Papple09152015022708.gif" alt=""><br>相信看到下图都该明白如何做到上图动画如何实现的了<br><img src="http://static.zybuluo.com/devinshine/xdhdxhv3ly34nh479tim26dn/jiangjietu2.png" alt=""></p>
<p>参考：<br><a href="http://gavinliu.cn/2015/03/30/Android-Animation-%E8%B4%9D%E5%A1%9E%E5%B0%94%E6%9B%B2%E7%BA%BF%E4%B9%8B%E7%BE%8E/" target="_blank" rel="external">Android - Animation 贝塞尔曲线之美</a><br><a href="https://github.com/GcsSloop/AndroidNote/blob/master/CustomView/Advance/%5B6%5DPath_Bezier.md" target="_blank" rel="external">Path之贝塞尔曲线</a><br><a href="http://www.jianshu.com/p/791d3a791ec2" target="_blank" rel="external">三次贝塞尔曲线练习之弹性的圆</a></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[自定义View之Path基础]]></title>
      <url>http://yoursite.com/2016/07/01/%E8%87%AA%E5%AE%9A%E4%B9%89View%E4%B9%8BPath%E5%9F%BA%E7%A1%80/</url>
      <content type="html"><![CDATA[<p>先提供一个api速查表：</p>
<table>
<thead>
<tr>
<th>作用</th>
<th>相关方法</th>
<th>备注</th>
</tr>
</thead>
<tbody>
<tr>
<td>移动起点</td>
<td>moveTo</td>
<td>移动下一次操作的起点位置</td>
</tr>
<tr>
<td>设置终点</td>
<td>setLastPoint</td>
<td>重置当前path中最后一个点位置，如果在绘制之前调用，效果和moveTo相同</td>
</tr>
<tr>
<td>连接直线</td>
<td>lineTo</td>
<td>添加上一个点到当前点之间的直线到Path</td>
</tr>
<tr>
<td>闭合路径</td>
<td>close</td>
<td>连接第一个点连接到最后一个点，形成一个闭合区域</td>
</tr>
<tr>
<td>添加内容</td>
<td>addRect, addRoundRect,  addOval, addCircle,     addPath, addArc, arcTo</td>
<td>添加(矩形， 圆角矩形， 椭圆， 圆， 路径， 圆弧) 到当前Path (注意addArc和arcTo的区别)</td>
</tr>
<tr>
<td>是否为空</td>
<td>isEmpty</td>
<td>判断Path是否为空</td>
</tr>
<tr>
<td>是否为矩形</td>
<td>isRect</td>
<td>判断path是否是一个矩形</td>
</tr>
<tr>
<td>替换路径</td>
<td>set</td>
<td>用新的路径替换到当前路径所有内容</td>
</tr>
<tr>
<td>偏移路径</td>
<td>offset</td>
<td>对当前路径之前的操作进行偏移(不会影响之后的操作)</td>
</tr>
<tr>
<td>贝塞尔曲线</td>
<td>quadTo, cubicTo</td>
<td>分别为二次和三次贝塞尔曲线的方法</td>
</tr>
<tr>
<td>rXxx方法</td>
<td>rMoveTo, rLineTo, rQuadTo, rCubicTo</td>
<td><strong>不带r的方法是基于原点的坐标系(偏移量)， rXxx方法是基于当前点坐标系(偏移量)</strong></td>
</tr>
<tr>
<td>填充模式</td>
<td>setFillType, getFillType, isInverseFillType, toggleInverseFillType</td>
<td>设置,获取,判断和切换填充模式</td>
</tr>
<tr>
<td>提示方法</td>
<td>incReserve</td>
<td>提示Path还有多少个点等待加入<strong>(这个方法貌似会让Path优化存储结构)</strong></td>
</tr>
<tr>
<td>布尔操作(API19)</td>
<td>op</td>
<td>对两个Path进行布尔运算(即取交集、并集等操作)</td>
</tr>
<tr>
<td>计算边界</td>
<td>computeBounds</td>
<td>计算Path的边界</td>
</tr>
<tr>
<td>重置路径</td>
<td>reset, rewind</td>
<td>清除Path中的内容<br> <strong>reset不保留内部数据结构，但会保留FillType.</strong><br> <strong>rewind会保留内部的数据结构，但不保留FillType</strong></td>
</tr>
<tr>
<td>矩阵操作</td>
<td>transform</td>
<td>矩阵变换</td>
</tr>
</tbody>
</table>
<p>简单例子：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">canvas.translate(mWidth / <span class="number">2</span>, mHeight / <span class="number">2</span>);  <span class="comment">// 移动坐标系到屏幕中心(宽高数据在onSizeChanged中获取)</span></span><br><span class="line"></span><br><span class="line">Path path = <span class="keyword">new</span> Path();                     <span class="comment">// 创建Path</span></span><br><span class="line"></span><br><span class="line">path.lineTo(<span class="number">200</span>, <span class="number">200</span>);                      <span class="comment">// lineTo</span></span><br><span class="line">path.lineTo(<span class="number">200</span>,<span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">canvas.drawPath(path, mPaint);              <span class="comment">// 绘制Path</span></span><br></pre></td></tr></table></figure>
<p>本文完全转载：<br><a href="https://github.com/GcsSloop/AndroidNote/blob/master/CustomView/Advance/%5B5%5DPath_Basic.md" target="_blank" rel="external">Path之基本操作</a></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[自定义View之基础]]></title>
      <url>http://yoursite.com/2016/07/01/%E8%87%AA%E5%AE%9A%E4%B9%89View%E4%B9%8B%E5%9F%BA%E7%A1%80/</url>
      <content type="html"><![CDATA[<h3 id="Android_u4E2D_u5750_u6807_u7CFB"><a href="#Android_u4E2D_u5750_u6807_u7CFB" class="headerlink" title="Android中坐标系"></a>Android中坐标系</h3><h4 id="u4E00-_u5C4F_u5E55_u5750_u6807_u7CFB"><a href="#u4E00-_u5C4F_u5E55_u5750_u6807_u7CFB" class="headerlink" title="一.屏幕坐标系"></a>一.屏幕坐标系</h4><p>实际手机屏幕坐标如下：</p>
<p><img src="https://camo.githubusercontent.com/a0c38e4f124e4b2b4a90e0767f24ee9e7b76f992/687474703a2f2f7777332e73696e61696d672e636e2f6c617267652f30303558746469326a773166317179686a793768386a333038633064777133322e6a7067" alt=""></p>
<h4 id="u4E8C-View_u5750_u6807_u7CFB"><a href="#u4E8C-View_u5750_u6807_u7CFB" class="headerlink" title="二.View坐标系"></a>二.View坐标系</h4><p>View的坐标系是相对父控件！！<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">getTop();       <span class="comment">//获取子View左上角距父View顶部的距离</span></span><br><span class="line">getLeft();      <span class="comment">//获取子View左上角距父View左侧的距离</span></span><br><span class="line">getBottom();    <span class="comment">//获取子View右下角距父View顶部的距离</span></span><br><span class="line">getRight();     <span class="comment">//获取子View右下角距父View左侧的距离</span></span><br></pre></td></tr></table></figure></p>
<p>如图：<br><img src="https://camo.githubusercontent.com/09df2f3f82180fd70ca62b084d906977215458f3/687474703a2f2f7777322e73696e61696d672e636e2f6c617267652f30303558746469326777316631717a7177766b6b626a33303863306477676d392e6a7067" alt=""></p>
<h4 id="u4E09-MotionEvent_u4E2D_get__u548C_getRaw__u7684_u533A_u522B"><a href="#u4E09-MotionEvent_u4E2D_get__u548C_getRaw__u7684_u533A_u522B" class="headerlink" title="三.MotionEvent中 get 和 getRaw 的区别"></a>三.MotionEvent中 get 和 getRaw 的区别</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">event.getX();       <span class="comment">//触摸点相对于其所在组件坐标系的坐标</span></span><br><span class="line">event.getY();</span><br><span class="line">event.getRawX();    <span class="comment">//触摸点相对于屏幕默认坐标系的坐标</span></span><br><span class="line">event.getRawY();</span><br></pre></td></tr></table></figure>
<p>如图：<br><img src="https://camo.githubusercontent.com/e5f1fba429c2f848e8ab8a56401b1ea9853599d8/687474703a2f2f7777312e73696e61696d672e636e2f6c617267652f30303558746469326a77316631723262646c7168626a333038633064777765772e6a7067" alt=""></p>
<h3 id="Android_u89D2_u5EA6_u4E0E_u5F27_u5EA6"><a href="#Android_u89D2_u5EA6_u4E0E_u5F27_u5EA6" class="headerlink" title="Android角度与弧度"></a>Android角度与弧度</h3><p>先贴出常用数学公式<br>周长：C = 2πr;<br>弧度 = 角度xπ/180<br>角度 = 弧度x180/<br>在屏幕中角度坐标如图：<br><img src="https://camo.githubusercontent.com/95f8d4ccfd184d68c2a7e3e9cc905e02eb4c8569/687474703a2f2f7777332e73696e61696d672e636e2f6c617267652f30303558746469326a773166317332776e736577666a333038633064777439342e6a7067" alt=""></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Android动画系列（三）]]></title>
      <url>http://yoursite.com/2016/06/29/Android%E5%8A%A8%E7%94%BB%E7%B3%BB%E5%88%97%EF%BC%88%E4%B8%89%EF%BC%89/</url>
      <content type="html"><![CDATA[<h3 id="Property_Animation__u7684_u5DE5_u4F5C_u65B9_u5F0F"><a href="#Property_Animation__u7684_u5DE5_u4F5C_u65B9_u5F0F" class="headerlink" title="Property Animation 的工作方式"></a>Property Animation 的工作方式</h3><p>Property Animation 动画有两个步聚：</p>
<ol>
<li>计算属性值</li>
<li>为目标对象的属性设置属性值，即应用和刷新动画<h4 id="u8BA1_u7B97_u5C5E_u6027_u503C"><a href="#u8BA1_u7B97_u5C5E_u6027_u503C" class="headerlink" title="计算属性值"></a>计算属性值</h4>过程一：计算已完成动画分数 elapsed fraction 为了执行一个动画，你需要创建一个 ValueAnimator，并且指定目标对象属性的开始、结束值和持续时间。在调用 start 后的整个动画过程中， ValueAnimator 会根据已经完成的动画时间计算得到一个 0 到 1 之间的分数，代表该动画的已完成动画百分比。0 表示 0%，1 表示 100%。<br>此文章截取转摘于<a href="http://a.codekk.com/detail/Android/lightSky/%E5%85%AC%E5%85%B1%E6%8A%80%E6%9C%AF%E7%82%B9%E4%B9%8B%20Android%20%E5%8A%A8%E7%94%BB%E5%9F%BA%E7%A1%80" target="_blank" rel="external">公共技术点之 Android 动画基础</a><br>过程二：计算插值（动画变化率）interpolated fraction 当 ValueAnimator 计算完已完成动画分数后，它会调用当前设置的 TimeInterpolator，去计算得到一个 interpolated（插值）分数，在计算过程中，已完成动画百分比会被加入到新的插值计算中。<br>过程三：计算属性值 当插值分数计算完成后，ValueAnimator 会根据插值分数调用合适的 TypeEvaluator 去计算运动中的属性值。<br>以上分析引入了两个概念：已完成动画分数（elapsed fraction）、插值分数( interpolated fraction )。<h4 id="u6838_u5FC3_u7C7B"><a href="#u6838_u5FC3_u7C7B" class="headerlink" title="核心类"></a>核心类</h4>属性动画类继承关系</li>
</ol>
<ul>
<li>Interpolators<br>插值器：时间的函数，定义了动画的变化律。<br>插值器只需实现一个方法：getInterpolation(float input),其作用就是把 0 到 1 的 elapsed fraction 变化映射到另一个 interpolated fraction。 Interpolator 接口的直接继承自TimeInterpolator，内部没有任何方法，而TimeInterpolator只有一个getInterpolation方法，所以所有的插值器只需实现getInterpolation方法即可。<br>传入参数是正常执行动画的时间点，返回值是调用者真正想要它执行的时间点。传入参数是{0,1}，返回值一般也是{0,1}。{0,1}表示整段动画的过程。中间的 0.2、0.3 等小数表示在整个动画（原本是匀速的）中的位置，其实就是一个比值。如果返回值是负数，会沿着相反的方向执行。如果返回的是大于 1，会超出正方向执行。也就是说，动画可能在你指定的值上下波动，大多数情况下是在指定值的范围内。<br>getInterpolation(float input)改变了默认动画的时间点 elapsed fraction，根据时间点 interpolated fraction 得到的是与默认时间点不同的属性值，插值器的原理就是通过改变实际执行动画的时间点，提前或延迟默认动画的时间点来达到加速/减速的效果。动画插值器目前都只是对动画执行过程的时间进行修饰，并没有对轨迹进行修饰。<br>简单点解释这个方法，就是当要执行 input 的时间时，通过 Interpolator 计算返回另外一个时间点，让系统执行另外一个时间的动画效果。</li>
<li>Evaluators</li>
</ul>
<p>Evaluators 告诉属性动画系统如何去计算一个属性值。它们通过 Animator 提供的动画的起始和结束值去计算一个动画的属性值。 属性系统提供了以下几种 Evaluators：<br>1.IntEvaluator<br>2.FloatEvaluator<br>3.ArgbEvaluator<br>这三个由系统提供，分别用于计算 int，float，color 型（十六进制）属性的计算器<br>4.TypeEvaluator<br>一个用于用户自定义计算器的接口，如果你的对象属性值类型，不是 int，float，或者 color 类型，你必须实现这个接口，去定义自己的数据类型。<br>TypeEvaluator接口只有一个方法，就是evaluate()方法，它允许你使用的 animator 返回一个当前动画点的属性值。<br>TimeInterpolator 和 TypeEvaluator 的区别<br>首先明确动画属性值的计算包括三步，其中第二步和第三步分别需要借助TimeInterpolator和TypeEvluator完成。<br>TypeEvaluator所做的是根据数据结构计算最终的属性值，允许你定义自己的数据结构，这是官方对它的真正定义，如果你所定义的属性值的数据类型不是 float、int、color 类型，那么你需要实现 TypeEvaluator 接口的evaluate()方法，自己进行属性值的计算<br>Interpolator更倾向于你定义一种运动的变化率，比如匀速、加速、减速等，官方对 Interpolator 的定义也确实是这样的：<br>A time interpolator defines the rate of change of an &gt;animation. This allows animations to have non-linear &gt;motion, such as acceleration and deceleration.<br>对于自定义高级动画时，弄清TimeInterpolator和TypeEvaluator非常重要，如果你希望要自定义自己的动画，那么这两个函数肯定是关键部分，一个是定义动画变化率，一个是定义数据结构和属性值计算方式，两者共同决定了一个动画的运动。</p>
<ul>
<li>ValueAnimator</li>
</ul>
<p>属性动画中的主要的时序引擎，如动画时间，开始、结束属性值，相应时间属性值计算方法等。包含了所有计算动画值的核心函数。也包含了每一个动画时间上的细节，信息，一个动画是否重复，是否监听更新事件等，并且还可以设置自定义的计算类型。<br>使用 ValueAnimator 实现动画需要手动更新：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">ValueAnimator animation = ValueAnimator.ofFloat(<span class="number">0f</span>, <span class="number">1f</span>);</span><br><span class="line">animation.setDuration(<span class="number">1000</span>);</span><br><span class="line">animation.addUpdateListener(<span class="keyword">new</span> AnimatorUpdateListener() &#123;</span><br><span class="line">    <span class="annotation">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onAnimationUpdate</span><span class="params">(ValueAnimator animation)</span> </span>&#123;</span><br><span class="line">        Log.i(<span class="string">"update"</span>, ((Float) animation.getAnimatedValue()).toString());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br><span class="line">animation.setInterpolator(<span class="keyword">new</span> CycleInterpolator(<span class="number">3</span>));</span><br><span class="line">animation.start();</span><br></pre></td></tr></table></figure></p>
<ul>
<li>ObjectAnimator<br>继承自ValueAnimator，允许你指定要进行动画的对象以及该对象的一个属性。该类会根据计算得到的新值自动更新属性。也就是说上 Property Animation 的两个步骤都实现了。大多数的情况，你使用ObjectAnimator就足够了，因为它使得目标对象动画值的处理过程变得简单，不用再向ValueAnimator那样自己写动画更新的逻辑。但ObjectAnimator有一定的限制，比如它需要目标对象的属性提供指定的处理方法，这个时候你需要根据自己的需求在ObjectAnimator和ValueAnimator中做个选择了，看哪种实现更简便。<br>ObjectAnimator的自动更新功能，依赖于属性身上的setter和getter方法，所以为了让ObjectAnimator能够正确的更新属性值，你必须遵从以下规范:<br>该对象的属性必须有get和set方法（方法的格式必须是驼峰式），方法格式为 set()，因为 ObjectAnimator 会自动更新属性，它必须能够访问到属性的setter方法，比如属性名为foo,你就需要一个setFoo()方法，如果 setter 方法不存在，你有三种选择：<br>a.添加 setter 方法<br>b.使用包装类。通过该包装类通过一个有效的 setter 方法获取或者改变属性值的方法，然后应用于原始对象，比如 NOA 的AnimatorProxy。<br>c.使用 ValueAnimator 代替<br>（这 3 点的意思总结起来就是一定要有一个setter方法，让ObjectAnimator能够访问到）<br>如果你为 ObjectAnimator 的工厂方法的可变参数只传递了一个值，那么会被作为动画的结束值。<br>注意，属性的getter方法和setter方法必须必须是相对应的，比如你构造了一个如下的ObjectAnimator，那么getter和setter方法就应该为：<br>targetObject.setPropName(float) 和 targetObject.getPropName(float) :<br>ObjectAnimator.ofFloat(targetObject, “propName”, 1f)<br>根据动画的目标属性或者对象不同，你可能需要调用某一个 View 的invalidate方法，根据新的动画值去强制屏幕重绘该 View。可以在onAnimateonUpdate()回调方法中去做。比如，对一个 Drawable 的颜色属性进行动画，只有当对象重绘自身的时候，才会导致该属性的更新，（不像平移或者缩放那样是实时的）。一个 View 的所有 setter 属性方法，比如setAlpha()和setTranslationX()都可以适当的更新 View。因此你不需要在重绘的时候为这些方法传递新的值。更多关于 Listener 的信息，可以参考第四部分 Animation Listeners。<br>简单总结下： 当你不希望向外暴露Setter方法的时候，或者希望获取到动画值统一做处理的话，亦或只需要一个简单的时序机制(拥有动画的各种值)的话，那么你可以选择使用ValueAnimator，它更简单。如果你就是希望更新动画，为了简便，可以使用ObjectAnimator，但自定义的属性必须有setter和getter方法，并且它们必须都是标准的驼峰式（确保内部能够调用），必须有结束值。你可以实现Animator.AnimatorListener接口根据自己的需求去更新 View。</li>
<li>AnimatorSet</li>
</ul>
<p>提供组合动画能力的类。并可设置组中动画的时序关系，如同时播放、有序播放或延迟播放。Elevator会告诉属性动画系统如何计算一个属性的值，它们会从Animator类中获取时序数据，比如开始和结束值，并依据这些数据计算动画的属性值。<br>小结： TypeEvaluator<br>定义了属性值的计算方式，有 int,float,color 类型，根据属性的开始、结束值和插值一起计算出当前时间的属性值，终极方法，整个动画属性值计算过程的结尾。<br>TimeInterpolation<br>插值器都必须实现的接口，定义了动画的变化率，如线性，非线性。<br>ValueAnimator与ObjectAnimator：<br>两者都可以进行属性动画，但是ObjectAnimator更加简单，不用去做更新属性值的计算，但是必须要提供标准的setter和getter方法，让ObjectAnimator能够获取和更新属性值。</p>
<ul>
<li>ViewPropertyAnimator</li>
</ul>
<p>可以方便的为某个 View 的多个属性添加并行的动画，只使用一个ViewPropertyAnimator对象就可以完成。它的行为更像一个ObjectAnimator，因为它修改的是对象的实际属性值。但它为一次性给多个属性添加动画提供了方便，而且使用ViewPropertyAnimator的代码更连贯更易读。<br>下面的代码段分别展示了使用多个ObjectAnimator对象、一个ObjectAnimator对象、 ViewPropertyAnimator同时为一个 View 的 X 和 Y 属性添加动画的示例：<br>多个 ObjectAnimator 结合 AnimatorSet 实现<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">ObjectAnimator animX = ObjectAnimator.ofFloat(myView, <span class="string">"x"</span>, <span class="number">50f</span>);</span><br><span class="line">ObjectAnimator animY = ObjectAnimator.ofFloat(myView, <span class="string">"y"</span>, <span class="number">100f</span>);</span><br><span class="line">AnimatorSet animSetXY = <span class="keyword">new</span> AnimatorSet();</span><br><span class="line">animSetXY.playTogether(animX, animY);</span><br><span class="line">animSetXY.start();</span><br><span class="line">一个 ObjectAnimator 结合多个 PropertyValuesHolder 实现</span><br><span class="line">PropertyValuesHolder pvhX = PropertyValuesHolder.ofFloat(<span class="string">"x"</span>, <span class="number">50f</span>);</span><br><span class="line">PropertyValuesHolder pvhY = PropertyValuesHolder.ofFloat(<span class="string">"y"</span>, <span class="number">100f</span>);</span><br><span class="line">ObjectAnimator.ofPropertyValuesHolder(myView, pvhX, pvyY).start();</span><br><span class="line">ViewPropertyAnimator: 只需一行代码</span><br><span class="line">myView.animate().x(<span class="number">50f</span>).y(<span class="number">100f</span>);<span class="comment">//myView.animate()直接返回一个 ViewPropertyAnimator 对象</span></span><br></pre></td></tr></table></figure></p>
<ul>
<li>PropertyValuesHolder<br>顾名思义，该类持有属性，相关属性值的操作以及属性的 setter，getter 方法的创建，属性值以 Keyframe 来承载，最终由 KeyframeSet 统一处理。</li>
<li>KeyFrame</li>
</ul>
<p>一个keyframe对象由一对 time / value 的键值对组成，可以为动画定义某一特定时间的特定状态。<br>每个keyframe可以拥有自己的插值器，用于控制前一帧和当前帧的时间间隔间内的动画。<br>Keyframe.ofFloat(0f,0f); 第一个参数为：要执行该帧动画的时间节点（elapsed time / duration）<br>第二个参数为属性值。<br>因此如果你想指定某一特定时间的特定状态，那么简单的使用 ObjectAnimator就满足不了你了，因为，ObjectAnimator.ofInt(….)类似的工厂方法，无法指定特定的时间点的状态。<br>每个 KeyFrame 的 Interpolator<br>每个KeyFrame其实也有个Interpolator。如果没有设置，默认是线性的。之前为Animator设置的Interpolator是整个动画的，而系统允许你为每一KeyFrame的单独定义Interpolator，系统这样做的目的是允许你在某一个keyFrame做特殊的处理，也就是整体上是按照你的插值函数来计算，但是，如果你希望某个或某些KeyFrame会有不同的动画表现，那么你可以为这个keyFrame设置Interpolator。<br>因此，Keyframe 的定制性更高，你如果想精确控制某一个时间点的动画值及其运动规律，你可以自己创建特定的 Keyframe<br>Keyframe 使用<br>为了实例化一个keyframe对象，你必须使用某一个工厂方法：ofInt(), ofFloat(), or ofObject() 去获取合适的keyframe类型，然后你调用ofKeyframe工厂方法去获取一个PropertyValuesHolder对象，一旦你拥有了该对象，你可以将 PropertyValuesHolder 作为参数获取一个Animator，如下：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">Keyframe kf0 = Keyframe.ofFloat(<span class="number">0f</span>, <span class="number">0f</span>);</span><br><span class="line">Keyframe kf1 = Keyframe.ofFloat(.<span class="number">5f</span>, <span class="number">360f</span>);</span><br><span class="line">Keyframe kf2 = Keyframe.ofFloat(<span class="number">1f</span>, <span class="number">0f</span>);</span><br><span class="line">PropertyValuesHolder pvhRotation = PropertyValuesHolder.ofKeyframe(<span class="string">"rotation"</span>, kf0, kf1, kf2);<span class="comment">//动画属性名，可变参数</span></span><br><span class="line">ObjectAnimator rotationAnim = ObjectAnimator.ofPropertyValuesHolder(target, pvhRotation)</span><br><span class="line">rotationAnim.setDuration(<span class="number">5000</span>);</span><br></pre></td></tr></table></figure></p>
<ul>
<li>KeyFrameSet<br>根据 Animator 传入的值，为当前动画创建一个特定类型的 KeyFrame 集合。<br>通常通过 ObjectAnimator.ofFloat(…)进行赋值时，这些值其实是通过一个 KeyFrameSet 来维护的<br>比如：<br>ObjectAnimator.ofFloat(target, “translateX”, 50, 100, 200);<br>调用者传入的 values 为 50,100,200，则 numKeyframs = 3，那么创建出相应的 Keyframe 为： Keyframe(0,50)，Keyframe(1/2,100)，Keyframe(1,200), 时间点 0，1/2，1 都是按比例划分的<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> KeyframeSet <span class="title">ofFloat</span><span class="params">(<span class="keyword">float</span>... values)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> numKeyframes = values.length;</span><br><span class="line">        FloatKeyframe keyframes[] = <span class="keyword">new</span> FloatKeyframe[Math.max(numKeyframes,<span class="number">2</span>)];</span><br><span class="line">        <span class="keyword">if</span> (numKeyframes == <span class="number">1</span>) &#123;</span><br><span class="line">            keyframes[<span class="number">0</span>] = (FloatKeyframe) Keyframe.ofFloat(<span class="number">0f</span>);</span><br><span class="line">            keyframes[<span class="number">1</span>] = (FloatKeyframe) Keyframe.ofFloat(<span class="number">1f</span>, values[<span class="number">0</span>]);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            keyframes[<span class="number">0</span>] = (FloatKeyframe) Keyframe.ofFloat(<span class="number">0f</span>, values[<span class="number">0</span>]);</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; numKeyframes; ++i) &#123;</span><br><span class="line">                keyframes[i] = (FloatKeyframe) Keyframe.ofFloat((<span class="keyword">float</span>) i / (numKeyframes - <span class="number">1</span>), values[i]);<span class="comment">//这里是关键</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> FloatKeyframeSet(keyframes);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>
</li>
</ul>
<h4 id="u5728_XML__u4E2D_u58F0_u660E_u5C5E_u6027_u52A8_u753B"><a href="#u5728_XML__u4E2D_u58F0_u660E_u5C5E_u6027_u52A8_u753B" class="headerlink" title="在 XML 中声明属性动画"></a>在 XML 中声明属性动画</h4><p>通过在 XML 中定义的动画，可以很方便的在多个 Activities 中重用而且更容易编辑，复用性强。为了区分新的属性动画，从 3.1 开始，你应res/animator/下存放属性动画的资源文件，使用animator文件夹是可选的，但是如果你想在 Eclipse ADT 插件中使用布局编辑工具（ADT 11.0.0+），就必须在res/animator文件夹下存放了，因为 ADT 只会查找res/animator文件夹下的属性动画资源文件。<br>属性动画支持的 Tag 有<br>ValueAnimator - <animator><br>ObjectAnimator - <objectanimator><br>AnimatorSet - <set><br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="title">set</span> <span class="attribute">android:ordering</span>=<span class="value">"sequentially"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="title">set</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="title">objectAnimator</span></span><br><span class="line">            <span class="attribute">android:propertyName</span>=<span class="value">"x"</span></span><br><span class="line">            <span class="attribute">android:duration</span>=<span class="value">"500"</span></span><br><span class="line">            <span class="attribute">android:valueTo</span>=<span class="value">"400"</span></span><br><span class="line">            <span class="attribute">android:valueType</span>=<span class="value">"intType"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="title">objectAnimator</span></span><br><span class="line">            <span class="attribute">android:propertyName</span>=<span class="value">"y"</span></span><br><span class="line">            <span class="attribute">android:duration</span>=<span class="value">"500"</span></span><br><span class="line">            <span class="attribute">android:valueTo</span>=<span class="value">"300"</span></span><br><span class="line">            <span class="attribute">android:valueType</span>=<span class="value">"intType"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="title">set</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="title">objectAnimator</span></span><br><span class="line">        <span class="attribute">android:propertyName</span>=<span class="value">"alpha"</span></span><br><span class="line">        <span class="attribute">android:duration</span>=<span class="value">"500"</span></span><br><span class="line">        <span class="attribute">android:valueTo</span>=<span class="value">"1f"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="title">set</span>&gt;</span></span><br></pre></td></tr></table></figure></set></objectanimator></animator></p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">AnimatorSet set = (AnimatorSet) AnimatorInflater.loadAnimator(myContext,</span><br><span class="line">    R.anim.property_animator);</span><br><span class="line">set.setTarget(myObject);</span><br><span class="line">set.start();</span><br></pre></td></tr></table></figure>
<p>目录 res/animator/filename.xm<br>编译后的资源为<br>ValueAnimator, ObjectAnimator, or AnimatorSet　<br>XML 文件的根元素必须为<set>,<objectanimator>, or <valueanimator>之一。也可以在一个 set 中组织不同的动画，包含其它<set>元素,也就是说，可以嵌套。<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="title">set</span>  </span><br><span class="line">  <span class="attribute">android:ordering</span>=<span class="value">["together"</span> | "<span class="attribute">sequentially</span>"]&gt;</span>  </span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="title">objectAnimator</span>  </span><br><span class="line">        <span class="attribute">android:propertyName</span>=<span class="value">"string"</span>  </span><br><span class="line">        <span class="attribute">android:duration</span>=<span class="value">"int"</span>  </span><br><span class="line">        <span class="attribute">android:valueFrom</span>=<span class="value">"float | int | color"</span>  </span><br><span class="line">        <span class="attribute">android:valueTo</span>=<span class="value">"float | int | color"</span>  </span><br><span class="line">        <span class="attribute">android:startOffset</span>=<span class="value">"int"</span>  </span><br><span class="line">        <span class="attribute">android:repeatCount</span>=<span class="value">"int"</span>  </span><br><span class="line">        <span class="attribute">android:repeatMode</span>=<span class="value">["repeat"</span> | "<span class="attribute">reverse</span>"]  </span><br><span class="line">        <span class="attribute">android:valueType</span>=<span class="value">["intType"</span> | "<span class="attribute">floatType</span>"]/&gt;</span>  </span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="title">animator</span>  </span><br><span class="line">        <span class="attribute">android:duration</span>=<span class="value">"int"</span>  </span><br><span class="line">        <span class="attribute">android:valueFrom</span>=<span class="value">"float | int | color"</span>  </span><br><span class="line">        <span class="attribute">android:valueTo</span>=<span class="value">"float | int | color"</span>  </span><br><span class="line">        <span class="attribute">android:startOffset</span>=<span class="value">"int"</span>  </span><br><span class="line">        <span class="attribute">android:repeatCount</span>=<span class="value">"int"</span>  </span><br><span class="line">        <span class="attribute">android:repeatMode</span>=<span class="value">["repeat"</span> | "<span class="attribute">reverse</span>"]  </span><br><span class="line">        <span class="attribute">android:valueType</span>=<span class="value">["intType"</span> | "<span class="attribute">floatType</span>"]/&gt;</span>  </span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="title">set</span>&gt;</span>  </span><br><span class="line">        ...  </span><br><span class="line">    <span class="tag">&lt;/<span class="title">set</span>&gt;</span>  </span><br><span class="line"><span class="tag">&lt;/<span class="title">set</span>&gt;</span></span><br></pre></td></tr></table></figure></set></valueanimator></objectanimator></set></p>
<h3 id="u5143_u7D20_u4ECB_u7ECD"><a href="#u5143_u7D20_u4ECB_u7ECD" class="headerlink" title="元素介绍"></a>元素介绍</h3><h4 id=""><a href="#" class="headerlink" title="<set>"></a><set></set></h4><p>动画集合节点，有一个属性 ordering，表示它的子动画启动方式是先后有序的还是同时。<br>属性<br>sequentially：动画按照先后顺序<br>together (default) ：动画同时启动</p>
<h4 id="-1"><a href="#-1" class="headerlink" title="<objectAnimator>"></a><objectanimator></objectanimator></h4><p>一个对象的一个属性，相应的 Java 类为:ObjectAnimator<br>属性<br>android:propertyName：<br>String 类型，必须要设定的值，代表要执行动画的属性，通过名字引用，比如你可以指定了一个 View 的”alpha” 或者 “backgroundColor”，这个 objectAnimator 元素没有暴露 target 属性，因此不能够在 XML 中执行一个动画，必须通过调用loadAnimator() 填充你的 XML 动画资源，并且调用setTarget() 应用到拥有这个属性的目标对象上。<br>android:valueTo<br>Float、int 或者 color，也是必须值，表明了动画结束的点，颜色由 6 位十六进制的数字表示。<br>android:valueFrom<br>相对应 valueTo，动画的起始点，如果没有指定，系统会通过属性身上的 get 方法获取，颜色也是 6 位十六进制的数字表示。<br>android:duration<br>动画的时长，int 类型，以毫秒为单位，默认为 300 毫秒。<br>android:startOffset<br>动画延迟的时间，从调用 start 方法后开始计算，int 型，毫秒为单位，<br>android:repeatCount<br>一个动画的重复次数，int 型，”-1“表示无限循环，”1“表示动画在第一次执行完成后重复执行一次，也就是两次，默认为 0，不重复执行。<br>android:repeatMode<br>重复模式：int 型，当一个动画执行完的时候应该如何处理。该值必须是正数或者是 -1，<br>“reverse”<br>会使得按照动画向相反的方向执行，可实现类似钟摆效果。<br>“repeat”<br>会使得动画每次都从头开始循环。<br>android:valueType<br>关键参数，如果该 value 是一个颜色，那么就不需要指定，因为动画框架会自动的处理颜色值。有 intType 和 floatType 两种：分别说明动画值为 int 和 float 型。</p>
<h4 id="-2"><a href="#-2" class="headerlink" title="<animator>"></a><animator></animator></h4><p>在一个特定的时间里执行一个动画。相对应的是 ValueAnimator.所有的属性和一样 android:valueTo<br>android:valueFrom<br>android:duration<br>android:startOffset<br>android:repeatCount<br>android:repeatMode<br>android:valueType<br>Value Description<br>floatType (default)<br>res/animator/property_animator.xml:<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="title">set</span> <span class="attribute">android:ordering</span>=<span class="value">"sequentially"</span>&gt;</span>  </span><br><span class="line">    <span class="tag">&lt;<span class="title">set</span>&gt;</span>  </span><br><span class="line">        <span class="tag">&lt;<span class="title">objectAnimator</span>  </span><br><span class="line">            <span class="attribute">android:propertyName</span>=<span class="value">"x"</span>  </span><br><span class="line">            <span class="attribute">android:duration</span>=<span class="value">"500"</span>  </span><br><span class="line">            <span class="attribute">android:valueTo</span>=<span class="value">"400"</span>  </span><br><span class="line">            <span class="attribute">android:valueType</span>=<span class="value">"intType"</span>/&gt;</span>  </span><br><span class="line">        <span class="tag">&lt;<span class="title">objectAnimator</span>  </span><br><span class="line">            <span class="attribute">android:propertyName</span>=<span class="value">"y"</span>  </span><br><span class="line">            <span class="attribute">android:duration</span>=<span class="value">"500"</span>  </span><br><span class="line">            <span class="attribute">android:valueTo</span>=<span class="value">"300"</span>  </span><br><span class="line">            <span class="attribute">android:valueType</span>=<span class="value">"intType"</span>/&gt;</span>  </span><br><span class="line">    <span class="tag">&lt;/<span class="title">set</span>&gt;</span>  </span><br><span class="line">    <span class="tag">&lt;<span class="title">objectAnimator</span>  </span><br><span class="line">        <span class="attribute">android:propertyName</span>=<span class="value">"alpha"</span>  </span><br><span class="line">        <span class="attribute">android:duration</span>=<span class="value">"500"</span>  </span><br><span class="line">        <span class="attribute">android:valueTo</span>=<span class="value">"1f"</span>/&gt;</span>  </span><br><span class="line"><span class="tag">&lt;/<span class="title">set</span>&gt;</span></span><br></pre></td></tr></table></figure></p>
<p>为了执行该动画，必须在代码中将该动画资源文件填充为一个 AnimationSet 对象，然后在执行动画前，为目标对象设置所有的动画集合。<br>简便的方法就是通过 setTarget 方法为目标对象设置动画集合，代码如下：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">AnimatorSet set = (AnimatorSet) AnimatorInflater.loadAnimator(myContext,  </span><br><span class="line">   R.anim.property_animator);  </span><br><span class="line">set.setTarget(myObject);  </span><br><span class="line">set.start();</span><br></pre></td></tr></table></figure></p>
<hr>
<p>借别人总结过的文章自己加以学习和汇总知识。其实也就是一些常用的api，后续准备和实际项目结合汇总。</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Android动画系列（二）]]></title>
      <url>http://yoursite.com/2016/06/29/Android%E5%8A%A8%E7%94%BB%E7%B3%BB%E5%88%97%EF%BC%88%E4%BA%8C%EF%BC%89/</url>
      <content type="html"><![CDATA[<p>上节主要说了下Tween动画和Frame动画的使用API，那么这节针对几个例子单独分析，包括广告滚动，登录抖动，3D旋转，美团loading（帧动画），以及View动画的特殊使用场景LayoutAnimation和Activity切换动画。</p>
<h2 id="u5E7F_u544A_u6EDA_u52A8"><a href="#u5E7F_u544A_u6EDA_u52A8" class="headerlink" title="广告滚动"></a>广告滚动</h2><p>先上效果图<br><img src="/imgs/animation1.gif" alt="广告动画"><br>activity界面代码使用ViewFlipper<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">mFlipper = ((ViewFlipper) <span class="keyword">this</span>.findViewById(R.id.flipper));</span><br><span class="line">mFlipper.setInAnimation(AnimationUtils.loadAnimation(<span class="keyword">this</span>,</span><br><span class="line">        R.anim.push_up_in));</span><br><span class="line">mFlipper.setOutAnimation(AnimationUtils.loadAnimation(<span class="keyword">this</span>,</span><br><span class="line">        R.anim.push_up_out));</span><br><span class="line">mFlipper.startFlipping();</span><br></pre></td></tr></table></figure></p>
<p>xml资源文件push_up_in.xml,push_up_out.xml<br><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version="1.0" encoding="utf-8"?&gt;</span><br><span class="line">&lt;set xmlns:android="http://schemas.android.com/apk/res/android"&gt;</span><br><span class="line">    &lt;translate</span><br><span class="line">        android:duration="300"</span><br><span class="line">        android:fromYDelta="100%p"</span><br><span class="line">        android:toYDelta="0" /&gt;</span><br><span class="line">    &lt;alpha</span><br><span class="line">        android:duration="300"</span><br><span class="line">        android:fromAlpha="0.0"</span><br><span class="line">        android:toAlpha="1.0" /&gt;</span><br><span class="line">&lt;/set&gt;</span><br></pre></td></tr></table></figure></p>
<figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version="1.0" encoding="utf-8"?&gt;</span><br><span class="line">&lt;set xmlns:android="http://schemas.android.com/apk/res/android"&gt;</span><br><span class="line">    &lt;translate</span><br><span class="line">        android:duration="300"</span><br><span class="line">        android:fromYDelta="0"</span><br><span class="line">        android:toYDelta="-100%p" /&gt;</span><br><span class="line">    &lt;alpha</span><br><span class="line">        android:duration="300"</span><br><span class="line">        android:fromAlpha="1.0"</span><br><span class="line">        android:toAlpha="0.0" /&gt;</span><br><span class="line">&lt;/set&gt;</span><br></pre></td></tr></table></figure>
<h3 id="u767B_u5F55_u6296_u52A8"><a href="#u767B_u5F55_u6296_u52A8" class="headerlink" title="登录抖动"></a>登录抖动</h3><h3 id="3D_u65CB_u8F6C"><a href="#3D_u65CB_u8F6C" class="headerlink" title="3D旋转"></a>3D旋转</h3><p>依旧效果图先上<br><img src="/imgs/animation2.gif" alt="3D旋转"><br>界面代码<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 获取布局的中心点位置，作为旋转的中心点</span></span><br><span class="line"><span class="keyword">float</span> centerX = btn.getWidth() / <span class="number">2f</span>;</span><br><span class="line"><span class="keyword">float</span> centerY = btn.getHeight() / <span class="number">2f</span>;</span><br><span class="line"><span class="comment">// 构建3D旋转动画对象，旋转角度为0到90度，这使得ListView将会从可见变为不可见</span></span><br><span class="line"><span class="keyword">final</span> Rotate3dAnimation rotation = <span class="keyword">new</span> Rotate3dAnimation(<span class="number">0</span>, <span class="number">90</span>, centerX, centerY,</span><br><span class="line">        <span class="number">310.0f</span>, <span class="keyword">true</span>);</span><br><span class="line"><span class="comment">// 动画持续时间500毫秒</span></span><br><span class="line">rotation.setDuration(<span class="number">500</span>);</span><br><span class="line"><span class="comment">// 动画完成后保持完成的状态</span></span><br><span class="line">rotation.setFillAfter(<span class="keyword">false</span>);</span><br><span class="line">rotation.setInterpolator(<span class="keyword">new</span> AccelerateInterpolator());</span><br><span class="line"><span class="comment">// 设置动画的监听器  TODO 此处没有写</span></span><br><span class="line">btn.startAnimation(rotation);</span><br></pre></td></tr></table></figure></p>
<p>此处重点在于Rotate3dAnimation,此类是api demos中例子借来使用<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span><br><span class="line"> * An animation that rotates the view on the Y axis between two specified angles.</span><br><span class="line"> * This animation also adds a translation on the Z axis (depth) to improve the effect.</span><br><span class="line"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Rotate3dAnimation</span> <span class="keyword">extends</span> <span class="title">Animation</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">float</span> mFromDegrees;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">float</span> mToDegrees;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">float</span> mCenterX;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">float</span> mCenterY;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">float</span> mDepthZ;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">boolean</span> mReverse;</span><br><span class="line">    <span class="keyword">private</span> Camera mCamera;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span><br><span class="line">     * Creates a new 3D rotation on the Y axis. The rotation is defined by its</span><br><span class="line">     * start angle and its end angle. Both angles are in degrees. The rotation</span><br><span class="line">     * is performed around a center point on the 2D space, definied by a pair</span><br><span class="line">     * of X and Y coordinates, called centerX and centerY. When the animation</span><br><span class="line">     * starts, a translation on the Z axis (depth) is performed. The length</span><br><span class="line">     * of the translation can be specified, as well as whether the translation</span><br><span class="line">     * should be reversed in time.</span><br><span class="line">     *</span><br><span class="line">     * <span class="doctag">@param</span> fromDegrees the start angle of the 3D rotation</span><br><span class="line">     * <span class="doctag">@param</span> toDegrees the end angle of the 3D rotation</span><br><span class="line">     * <span class="doctag">@param</span> centerX the X center of the 3D rotation</span><br><span class="line">     * <span class="doctag">@param</span> centerY the Y center of the 3D rotation</span><br><span class="line">     * <span class="doctag">@param</span> reverse true if the translation should be reversed, false otherwise</span><br><span class="line">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Rotate3dAnimation</span><span class="params">(<span class="keyword">float</span> fromDegrees, <span class="keyword">float</span> toDegrees,</span><br><span class="line">                             <span class="keyword">float</span> centerX, <span class="keyword">float</span> centerY, <span class="keyword">float</span> depthZ, <span class="keyword">boolean</span> reverse)</span> </span>&#123;</span><br><span class="line">        mFromDegrees = fromDegrees;</span><br><span class="line">        mToDegrees = toDegrees;</span><br><span class="line">        mCenterX = centerX;</span><br><span class="line">        mCenterY = centerY;</span><br><span class="line">        mDepthZ = depthZ;</span><br><span class="line">        mReverse = reverse;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="annotation">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">initialize</span><span class="params">(<span class="keyword">int</span> width, <span class="keyword">int</span> height, <span class="keyword">int</span> parentWidth, <span class="keyword">int</span> parentHeight)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>.initialize(width, height, parentWidth, parentHeight);</span><br><span class="line">        mCamera = <span class="keyword">new</span> Camera();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="annotation">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">applyTransformation</span><span class="params">(<span class="keyword">float</span> interpolatedTime, Transformation t)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">final</span> <span class="keyword">float</span> fromDegrees = mFromDegrees;</span><br><span class="line">        <span class="keyword">float</span> degrees = fromDegrees + ((mToDegrees - fromDegrees) * interpolatedTime);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">final</span> <span class="keyword">float</span> centerX = mCenterX;</span><br><span class="line">        <span class="keyword">final</span> <span class="keyword">float</span> centerY = mCenterY;</span><br><span class="line">        <span class="keyword">final</span> Camera camera = mCamera;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">final</span> Matrix matrix = t.getMatrix();</span><br><span class="line"></span><br><span class="line">        camera.save();</span><br><span class="line">        <span class="keyword">if</span> (mReverse) &#123;</span><br><span class="line">            camera.translate(<span class="number">0.0f</span>, <span class="number">0.0f</span>, mDepthZ * interpolatedTime);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            camera.translate(<span class="number">0.0f</span>, <span class="number">0.0f</span>, mDepthZ * (<span class="number">1.0f</span> - interpolatedTime));</span><br><span class="line">        &#125;</span><br><span class="line">        camera.rotateY(degrees);</span><br><span class="line">        camera.getMatrix(matrix);</span><br><span class="line">        camera.restore();</span><br><span class="line"></span><br><span class="line">        matrix.preTranslate(-centerX, -centerY);</span><br><span class="line">        matrix.postTranslate(centerX, centerY);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<h3 id="LayoutAnimation"><a href="#LayoutAnimation" class="headerlink" title="LayoutAnimation"></a>LayoutAnimation</h3><p><img src="/imgs/animation3.gif" alt=""><br>LayoutAnimation作用于ViewGroup，它的子元素出场都会具有动画，常见listview的item动画，其实它是用的就是LayoutAnimation。具体xml如下<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">android:layoutAnimation="@anim/anim_layout"</span><br></pre></td></tr></table></figure></p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="title">layoutAnimation</span></span><br><span class="line">    <span class="attribute">xmlns:android</span>=<span class="value">"http://schemas.android.com/apk/res/android"</span></span><br><span class="line">    <span class="attribute">android:delay</span>=<span class="value">"0.5"</span></span><br><span class="line">    <span class="attribute">android:animationOrder</span>=<span class="value">"reverse"</span></span><br><span class="line">    <span class="attribute">android:animation</span>=<span class="value">"@anim/anim_item"</span>/&gt;</span></span><br></pre></td></tr></table></figure>
<p>animationOrder:normal（默认顺序显示）、random（随机）、reverse（逆向）<br>再贴一个item动画<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="pi">&lt;?xml version="1.0" encoding="utf-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="title">set</span> <span class="attribute">xmlns:android</span>=<span class="value">"http://schemas.android.com/apk/res/android"</span></span><br><span class="line">    <span class="attribute">android:duration</span>=<span class="value">"500"</span></span><br><span class="line">    <span class="attribute">android:interpolator</span>=<span class="value">"@android:anim/accelerate_interpolator"</span></span><br><span class="line">    <span class="attribute">android:shareInterpolator</span>=<span class="value">"true"</span> &gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="title">alpha</span></span><br><span class="line">        <span class="attribute">android:fromAlpha</span>=<span class="value">"0.0"</span></span><br><span class="line">        <span class="attribute">android:toAlpha</span>=<span class="value">"1.0"</span> /&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="title">translate</span></span><br><span class="line">        <span class="attribute">android:fromXDelta</span>=<span class="value">"500"</span></span><br><span class="line">        <span class="attribute">android:toXDelta</span>=<span class="value">"0"</span> /&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="title">set</span>&gt;</span></span><br></pre></td></tr></table></figure></p>
<h3 id="Activity_u5207_u6362_u6548_u679C"><a href="#Activity_u5207_u6362_u6548_u679C" class="headerlink" title="Activity切换效果"></a>Activity切换效果</h3><p>主要代码<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">overridePendingTransition(R.anim.enter_anim, R.anim.exit_anim);</span><br></pre></td></tr></table></figure></p>
<p>也可写在主题中，不再演示<br>exit_anim.xml<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="pi">&lt;?xml version="1.0" encoding="utf-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="title">set</span> <span class="attribute">xmlns:android</span>=<span class="value">"http://schemas.android.com/apk/res/android"</span></span><br><span class="line">    <span class="attribute">android:duration</span>=<span class="value">"300"</span></span><br><span class="line">    <span class="attribute">android:interpolator</span>=<span class="value">"@android:anim/accelerate_interpolator"</span></span><br><span class="line">    <span class="attribute">android:shareInterpolator</span>=<span class="value">"true"</span> &gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="title">alpha</span></span><br><span class="line">        <span class="attribute">android:fromAlpha</span>=<span class="value">"1.0"</span></span><br><span class="line">        <span class="attribute">android:toAlpha</span>=<span class="value">"0"</span> /&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="title">translate</span></span><br><span class="line">        <span class="attribute">android:fromYDelta</span>=<span class="value">"0"</span></span><br><span class="line">        <span class="attribute">android:toYDelta</span>=<span class="value">"500"</span> /&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="title">set</span>&gt;</span></span><br></pre></td></tr></table></figure></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Android动画系列（一）]]></title>
      <url>http://yoursite.com/2016/06/29/Android%E5%8A%A8%E7%94%BB%E7%B3%BB%E5%88%97%EF%BC%88%E4%B8%80%EF%BC%89/</url>
      <content type="html"><![CDATA[<p>Android中动画可以分为三种：View动画（Tween动画），帧动画（Frame动画）和属性动画。前两种可以归结为传统动画，Tween 动画通过对对象不断图像变化（平移、缩放、旋转、透明度）产生动画效果。在Android3.0后支持属性动画，通过动态改变对象的属性达到动画效果，低版本可以使用兼容库来实现属性动画，本篇就围绕传统动画纪录。<br>本文说不上是深入分析，充其量也就是View动画使用指南API。自己在开发过程也是经常使用，但是缺少一个完善的总结，so，借用别人总结好的懒一阵子。<br>参考文章<a href="http://a.codekk.com/detail/Android/lightSky/%E5%85%AC%E5%85%B1%E6%8A%80%E6%9C%AF%E7%82%B9%E4%B9%8B%20Android%20%E5%8A%A8%E7%94%BB%E5%9F%BA%E7%A1%80" target="_blank" rel="external">公共技术点之 Android 动画基础</a></p>
<h2 id="Tween__u52A8_u753B"><a href="#Tween__u52A8_u753B" class="headerlink" title="Tween 动画"></a>Tween 动画</h2><p>主要有 4 中：缩放、平移、渐变、旋转<br>tween 相关类继承关系<br>文件位置: res/anim/filename.xml<br>编译资源的数据类型：an Animation<br>资源引用：<br>Java: R.anim.filename<br>XML: @[package:]anim/filename<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="pi">&lt;?xml version="1.0" encoding="utf-8"?&gt;</span>  </span><br><span class="line">    <span class="tag">&lt;<span class="title">set</span> <span class="attribute">xmlns:android</span>=<span class="value">"http://schemas.android.com/apk/res/android"</span>  </span><br><span class="line">        <span class="attribute">android:interpolator</span>=<span class="value">"@[package:]anim/interpolator_resource"</span>  </span><br><span class="line">        <span class="attribute">android:shareInterpolator</span>=<span class="value">["true"</span> | "<span class="attribute">false</span>"] &gt;</span>  </span><br><span class="line">        <span class="tag">&lt;<span class="title">alpha</span>  </span><br><span class="line">        <span class="attribute">android:fromAlpha</span>=<span class="value">"float"</span>  </span><br><span class="line">        <span class="attribute">android:toAlpha</span>=<span class="value">"float"</span> /&gt;</span>  </span><br><span class="line">        <span class="tag">&lt;<span class="title">scale</span>  </span><br><span class="line">        <span class="attribute">android:fromXScale</span>=<span class="value">"float"</span>  </span><br><span class="line">        <span class="attribute">android:toXScale</span>=<span class="value">"float"</span>  </span><br><span class="line">        <span class="attribute">android:fromYScale</span>=<span class="value">"float"</span>  </span><br><span class="line">        <span class="attribute">android:toYScale</span>=<span class="value">"float"</span>  </span><br><span class="line">        <span class="attribute">android:pivotX</span>=<span class="value">"float"</span>  </span><br><span class="line">        <span class="attribute">android:pivotY</span>=<span class="value">"float"</span> /&gt;</span>  </span><br><span class="line">        <span class="tag">&lt;<span class="title">translate</span>  </span><br><span class="line">        <span class="attribute">android:fromXDelta</span>=<span class="value">"float"</span>  </span><br><span class="line">        <span class="attribute">android:toXDelta</span>=<span class="value">"float"</span>  </span><br><span class="line">        <span class="attribute">android:fromYDelta</span>=<span class="value">"float"</span>  </span><br><span class="line">        <span class="attribute">android:toYDelta</span>=<span class="value">"float"</span> /&gt;</span>  </span><br><span class="line">        <span class="tag">&lt;<span class="title">rotate</span>  </span><br><span class="line">        <span class="attribute">android:fromDegrees</span>=<span class="value">"float"</span>  </span><br><span class="line">        <span class="attribute">android:toDegrees</span>=<span class="value">"float"</span>  </span><br><span class="line">        <span class="attribute">android:pivotX</span>=<span class="value">"float"</span>  </span><br><span class="line">        <span class="attribute">android:pivotY</span>=<span class="value">"float"</span> /&gt;</span>  </span><br><span class="line">        <span class="tag">&lt;<span class="title">set</span>&gt;</span>  </span><br><span class="line">        ...  </span><br><span class="line">        <span class="tag">&lt;/<span class="title">set</span>&gt;</span>  </span><br><span class="line">    <span class="tag">&lt;/<span class="title">set</span>&gt;</span></span><br></pre></td></tr></table></figure></p>
<p>布局文件必须有一个独立的根元素，可以是 <alpha>,<scale>, <translate>, <rotate>, <set>（持有一组其它的动画元素，甚至可以是内嵌的 set 元素） 中的一个</set></rotate></translate></scale></alpha></p>
<h2 id="1-1"><a href="#1-1" class="headerlink" title="1.1 <set>"></a>1.1 <set></set></h2><p>一个持有其它动画元素的容器 <alpha>, <scale>, <translate>,<rotate>或者其它 <set> 元素<br>属性<br>android:interpolator<br>应用于动画的插值器。该值必须是一个指定了插值器资源的引用（不是一个插值器的类名），在平台中有缺省的插值器资源可以使用，或者你可以创建自己的插值器资源，可以看下面关于插值器的讨论。<br>android:shareInterpolator<br>Boolean 值， true：代表在所有的子元素中共享同一个插值器</set></rotate></translate></scale></alpha></p>
<h3 id="1-2"><a href="#1-2" class="headerlink" title="1.2 <alpha>"></a>1.2 <alpha></alpha></h3><p>A fade-in or fade-out animation. Represents an AlphaAnimation. 一个渐入渐出的动画，对应的 java 类为 AlphaAnimation。<br>属性<br>android:fromAlpha<br>android:toAlpha<br>代表动画开始和结束时透明度，0.0 表示完全透明，1.0 表示完全不透明，Float 值</p>
<h3 id="1-3"><a href="#1-3" class="headerlink" title="1.3 <scale>"></a>1.3 <scale></scale></h3><p>可以实现动态调控件尺寸的效果，通过设置 pivotX 和 pivotY 你可以指定 image 缩放的中心点，比如：如果这些值是 0，则表示左上角，所有的缩放变化将沿着右下角的轨迹运动。对应的类为：ScaleAnimation<br>属性<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">android:fromXScale</span><br><span class="line">android:toXScale</span><br><span class="line">android:fromYScale</span><br><span class="line">android:toYScale</span><br><span class="line">Float 值，为动画起始到结束时，X、Y 坐标上的伸缩尺寸</span><br><span class="line"><span class="number">0.0</span> 表示收缩到没有</span><br><span class="line"><span class="number">1.0</span> 表示正常无伸缩</span><br><span class="line">android:pivotX</span><br><span class="line">android:pivotY</span><br><span class="line">代表缩放的中轴点 X/Y 坐标，浮点值</span><br><span class="line">如果我们想表示中轴点为图像的中心，我们可以把两个属性值定义成 <span class="number">0.5</span> 或者 <span class="number">50</span>%。</span><br></pre></td></tr></table></figure></p>
<h3 id="1-4"><a href="#1-4" class="headerlink" title="1.4 <translate>"></a>1.4 <translate></translate></h3><p>代表一个水平、垂直的位移。对应的类为 TranslateAnimation. 属性<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">android:fromXDelta 属性代表起始 X 方向的位置</span><br><span class="line">android:toXDelta</span><br><span class="line">android:fromYDelta</span><br><span class="line">android:toYDelta</span><br></pre></td></tr></table></figure></p>
<p>代表动画起始或者结束 X / Y 方向上的位置，Float 或者百分比值<br>浮点数 num%、num%p 分别相对于自身或者父控件<br>如果以浮点数字表示，是一个绝对值，代表相对自身原始位置的像素值；<br>如果以 num%表示，代表相对于自己的百分比，比如 toXDelta 定义为 100%就表示在 X 方向上移动自己的 1 倍距离<br>如果以 num%p 表示，代表相对于父类组件的百分比。</p>
<h3 id="1-5"><a href="#1-5" class="headerlink" title="1.5 <rotate>"></a>1.5 <rotate></rotate></h3><p>是旋转动画，与之对应的 Java 类是 RotateAnimation<br>属性<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">android:fromDegrees</span><br><span class="line">android:toDegrees</span><br><span class="line">代表起始和结束的角度，浮点值，单位：度</span><br><span class="line">android:pivotX 属性代表旋转中心的 X 坐标值</span><br><span class="line">android:pivotY 属性代表旋转中心的 Y 坐标值</span><br><span class="line">Float 值或者百分比</span><br><span class="line">这两个属性也有三种表示方式，但是 X 轴都是相对方向都是 Left，Y 轴都是相对于 Top</span><br><span class="line">浮点数、num%、num%p；</span><br><span class="line">数字方式代表相对于自身左边缘的像素值，</span><br><span class="line">num%方式代表相对于自身左边缘或顶边缘的百分比，</span><br><span class="line">num%p 方式代表相对于父容器的左边缘或顶边缘的百分比</span><br><span class="line">属性</span><br><span class="line">android:fromDegrees</span><br><span class="line">android:toDegrees</span><br><span class="line">开始和结束时的弧度位置，单位是度，Float 值</span><br></pre></td></tr></table></figure></p>
<p>调用代码<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">ImageView image = (ImageView) findViewById(R.id.image);  </span><br><span class="line">Animation hyperspaceJump = AnimationUtils.loadAnimation(<span class="keyword">this</span>, R.anim.hyperspace_jump); </span><br><span class="line">image.startAnimation(hyperspaceJump);</span><br></pre></td></tr></table></figure></p>
<p>另外，在动画中，如果我们添加了 android:fillAfter=”true”后，这个动画执行完之后保持最后的状态；android:duration=”integer”代表动画持续的时间，单位为毫秒。</p>
<h3 id="1-6__u63D2_u503C_u5668"><a href="#1-6__u63D2_u503C_u5668" class="headerlink" title="1.6 插值器"></a>1.6 插值器</h3><p>用于修改一个动画过程中的速率，可以定义各种各样的非线性变化函数，比如加速、减速等<br>在 Android 中所有的插值器都是 Interpolator 的子类，通过 android:interpolator 属性你可以引用不同的插值器。下面是几种插值器:<br>插值器<br>你可以通过下面的方式使用它们<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="title">set</span> <span class="attribute">android:interpolator</span>=<span class="value">"@android:anim/accelerate_interpolator"</span>&gt;</span>  </span><br><span class="line">        ...  </span><br><span class="line"><span class="tag">&lt;/<span class="title">set</span>&gt;</span></span><br></pre></td></tr></table></figure></p>
<p>自定义插值器 如果你对系统提供的插值器不满意，我们可以创建一个插值器资源修改插值器的属性，比如修改 AnticipateInterpolator 的加速速率，调整 CycleInterpolator 的循环次数等。为了完成这种需求，我们需要创建 XML 资源文件，然后将其放于/res/anim 下，然后再动画元素中引用即可。我们先来看一下几种常见的插值器可调整的属性：<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="pi">&lt;?xml version="1.0" encoding="utf-8"?&gt;</span>  </span><br><span class="line">    <span class="tag">&lt;<span class="title">InterpolatorName</span> <span class="attribute">xmlns:android</span>=<span class="value">"http://schemas.android.com/apk/res/android"</span>  </span><br><span class="line">        <span class="attribute">android:attribute_name</span>=<span class="value">"value"</span>  </span><br><span class="line"> /&gt;</span></span><br></pre></td></tr></table></figure></p>
<p>我们先来看一下几种常见的插值器可调整的属性：<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="title">accelerateDecelerateInterpolator</span>&gt;</span> 无</span><br><span class="line"><span class="tag">&lt;<span class="title">accelerateInterpolator</span>&gt;</span> android:factor 浮点值，加速速率，默认为 1</span><br><span class="line"><span class="tag">&lt;<span class="title">anticipateInterploator</span>&gt;</span> android:tension 浮点值，起始点后退的张力、拉力数，默认为 2</span><br><span class="line"><span class="tag">&lt;<span class="title">anticipateOvershootInterpolator</span>&gt;</span> android:tension 同上 android:extraTension 浮点值，拉力的倍数，默认为 1.5（2 * 1.5）</span><br><span class="line"><span class="tag">&lt;<span class="title">bounceInterpolator</span>&gt;</span> 无</span><br><span class="line"><span class="tag">&lt;<span class="title">cycleInterplolator</span>&gt;</span> android:cycles int，循环的个数，默认为 1</span><br><span class="line"><span class="tag">&lt;<span class="title">decelerateInterpolator</span>&gt;</span> android:factor 浮点值，减速的速率，默认为 1</span><br><span class="line"><span class="tag">&lt;<span class="title">linearInterpolator</span>&gt;</span> 无</span><br><span class="line"><span class="tag">&lt;<span class="title">overshootInterpolator</span>&gt;</span> 浮点值，超出终点后的张力、拉力，默认为 2</span><br></pre></td></tr></table></figure></p>
<p>比如：res/anim/my_overshoot_interpolator.xml:<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="pi">&lt;?xml version="1.0" encoding="utf-8"?&gt;</span>  </span><br><span class="line"><span class="tag">&lt;<span class="title">overshootInterpolator</span> <span class="attribute">xmlns:android</span>=<span class="value">"http://schemas.android.com/apk/res/android"</span>  </span><br><span class="line"><span class="attribute">android:tension</span>=<span class="value">"7.0"</span>/&gt;</span>  </span><br><span class="line">    This animation XML will apply the interpolator:  </span><br><span class="line">    <span class="tag">&lt;<span class="title">scale</span> <span class="attribute">xmlns:android</span>=<span class="value">"http://schemas.android.com/apk/res/android"</span>  </span><br><span class="line">        <span class="attribute">android:interpolator</span>=<span class="value">"@anim/my_overshoot_interpolator"</span>  </span><br><span class="line">        <span class="attribute">android:fromXScale</span>=<span class="value">"1.0"</span>  </span><br><span class="line">        <span class="attribute">android:toXScale</span>=<span class="value">"3.0"</span>  </span><br><span class="line">        <span class="attribute">android:fromYScale</span>=<span class="value">"1.0"</span>  </span><br><span class="line">        <span class="attribute">android:toYScale</span>=<span class="value">"3.0"</span>  </span><br><span class="line">        <span class="attribute">android:pivotX</span>=<span class="value">"50%"</span>  </span><br><span class="line">        <span class="attribute">android:pivotY</span>=<span class="value">"50%"</span>  </span><br><span class="line">        <span class="attribute">android:duration</span>=<span class="value">"700"</span> /&gt;</span></span><br></pre></td></tr></table></figure></p>
<p>如果简单的修改插值器的属性值还不能够满足我们的需求，那么就自己来通过实现 Interpolator 接口来定义自己的插值器了 因为上面所有的 Interpolator 都实现了 Interpolator 接口，这个接口定义了一个方法：float getInterpolation(float input); 此方法由系统调用，input 代表动画的时间，在 0 和 1 之间，也就是开始和结束之间。<br>线性（匀速）插值器定义如下：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">float</span> <span class="title">getInterpolation</span><span class="params">(<span class="keyword">float</span> input)</span> </span>&#123;    </span><br><span class="line">        <span class="keyword">return</span> input;    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>加速减速插值器定义如下：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">float</span> <span class="title">getInterpolation</span><span class="params">(<span class="keyword">float</span> input)</span> </span>&#123;    </span><br><span class="line">        <span class="keyword">return</span> (<span class="keyword">float</span>)(Math.cos((input + <span class="number">1</span>) * Math.PI) / <span class="number">2.0f</span>) + <span class="number">0.5f</span>;    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<h2 id="Frame__u52A8_u753B"><a href="#Frame__u52A8_u753B" class="headerlink" title="Frame 动画"></a>Frame 动画</h2><p>文件目录：res/drawable/filename.xml<br>编译资源数据类型 AnimationDrawable<br>资源引用：<br>Java: R.drawable.filename<br>XML: @[package:]drawable.filename<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="pi">&lt;?xml version="1.0" encoding="utf-8"?&gt;</span>  </span><br><span class="line"><span class="tag">&lt;<span class="title">animation-list</span> <span class="attribute">xmlns:android</span>=<span class="value">"http://schemas.android.com/apk/res/android"</span>  </span><br><span class="line">   <span class="attribute">android:oneshot</span>=<span class="value">["true"</span> | "<span class="attribute">false</span>"] &gt;</span>  </span><br><span class="line">    <span class="tag">&lt;<span class="title">item</span>  </span><br><span class="line">        <span class="attribute">android:drawable</span>=<span class="value">"@[package:]drawable/drawable_resource_name"</span>  </span><br><span class="line">        <span class="attribute">android:duration</span>=<span class="value">"integer"</span> /&gt;</span>  </span><br><span class="line"><span class="tag">&lt;/<span class="title">animation-list</span>&gt;</span></span><br></pre></td></tr></table></figure></p>
<h3 id="2-1"><a href="#2-1" class="headerlink" title="2.1 <animation-list>"></a>2.1 <animation-list></animation-list></h3><p>必须作为根元素，包含一个或者多个根元素<br>属性：android:oneshot ：true：只执行一次动画，false：循环执行</p>
<h3 id="2-2"><a href="#2-2" class="headerlink" title="2.2 <item>"></a>2.2 <item></item></h3><p>A single frame of animation. Must be a child of a <animation-list> element. 一帧独立动画，必须是 <animation-list>的子元素<br>属性<br>android:drawable<br>Drawable 资源，用于这一帧的图片<br>android:duration<br>Integer 类型.该帧的时长，单位为毫秒 milliseconds.<br>res/anim/rocket.xml:<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="pi">&lt;?xml version="1.0" encoding="utf-8"?&gt;</span>  </span><br><span class="line">        <span class="tag">&lt;<span class="title">animation-list</span> <span class="attribute">xmlns:android</span>=<span class="value">"http://schemas.android.com/apk/res/android"</span>  </span><br><span class="line">            <span class="attribute">android:oneshot</span>=<span class="value">"false"</span>&gt;</span>  </span><br><span class="line">            <span class="tag">&lt;<span class="title">item</span> <span class="attribute">android:drawable</span>=<span class="value">"@drawable/rocket_thrust1"</span> <span class="attribute">android:duration</span>=<span class="value">"200"</span> /&gt;</span>  </span><br><span class="line">            <span class="tag">&lt;<span class="title">item</span> <span class="attribute">android:drawable</span>=<span class="value">"@drawable/rocket_thrust2"</span> <span class="attribute">android:duration</span>=<span class="value">"200"</span> /&gt;</span>  </span><br><span class="line">            <span class="tag">&lt;<span class="title">item</span> <span class="attribute">android:drawable</span>=<span class="value">"@drawable/rocket_thrust3"</span> <span class="attribute">android:duration</span>=<span class="value">"200"</span> /&gt;</span>  </span><br><span class="line">        <span class="tag">&lt;/<span class="title">animation-list</span>&gt;</span></span><br></pre></td></tr></table></figure></animation-list></animation-list></p>
<p>调用代码<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">ImageView rocketImage = (ImageView) findViewById(R.id.rocket_image);  </span><br><span class="line">rocketImage.setBackgroundResource(R.drawable.rocket_thrust);  </span><br><span class="line">rocketAnimation = (AnimationDrawable) rocketImage.getBackground();  </span><br><span class="line">rocketAnimation.start();</span><br></pre></td></tr></table></figure></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[<转>程序员，你迷茫么？你忧伤么？]]></title>
      <url>http://yoursite.com/2016/06/29/%3C%E8%BD%AC%3E%E7%A8%8B%E5%BA%8F%E5%91%98%EF%BC%8C%E4%BD%A0%E8%BF%B7%E8%8C%AB%E4%B9%88%EF%BC%9F%E4%BD%A0%E5%BF%A7%E4%BC%A4%E4%B9%88%EF%BC%9F/</url>
      <content type="html"><![CDATA[<p>你如果是早上6点爬起床，刷牙洗脸，随便吃点早点，接着跑去挤地铁公交，尽量小心的不被挤成饼。挤地铁公交，使劲的小心不被挤成饼。中午一个小时吃饭，半个小时睡午觉。晚上无偿加班到9点10点，周六还必须常薪上班。如果你还梦想着进入Google，Facebook，还想着房、车、美女啥的，那就别放假，多写代码多学习，你哪来的看时间去迷茫去忧伤啊！</p>
<p>你要是想到以后吃不起肉，旅不起游，看不起最新大片，连买瓶三块钱的鲜橙多都要犹豫挣扎的问下：阿姨，二块五卖不？你还敢迷茫敢忧伤啊！你当你是少年维特啊，维特的烦恼之所以迷人，那是人家名字前还有少年两个字。你要是混到中年，住不起房，开不起车，泡不起妞，天天对着现实哼哼唧唧，鬼会去聆听你那“凄美感伤”的烦恼。</p>
<p>你说说你都这么把年纪了，还玩什么淡淡的忧伤，深深的迷茫啊，再不拼命，工作都丢了，就要去要饭了，就算天上掉个馅饼，你还要比别人先发现张嘴去接着提前准备呢。你迷茫个鬼忧伤个死啊，看人家谈恋爱你羡慕什么，还怕以后嫁不出去找不到老婆么，看人家拿offer满世界跑你眼红什么，没看到人家怎么呕心沥血苦尽甘来么。还不赶紧去写代码拼命去，偷个P闲！ 家里，公司，你就只能去这两个地方。厕所你都要算好时间再去。</p>
<p>寂寞。 一个人早起晚睡不难，但在一群晚起早睡的人中早起晚睡不简单。没人陪你吃饭，没人陪你逛街，没人陪你这个那个。人生就是孤独的？没人经常短信你，没人经常鼓励你，没人一直关注你。不管是打雷下雨下雹子还是刀子，都要早起前行去上班，你的伙伴会贪睡不去，但不可以是你。你的同事室友饭友朋友各种友都可以中途打断他们的计划，你不可以！你要学习。 你为了一个Bug改了一晚上，你以为很傻很土很幼稚吗？别人笑，是羡慕，你笑，是自信。</p>
<p>欲望。想睡懒觉，想看电影，想吃大餐，想上猫扑，天涯，CSDN。但是他们都是花时间的事，占用写代码，学习的时间。可以放假，可以休息。可要是每天多睡2小时，一年就多睡掉30.4天，一个月没了。每天看两集电视，又是一个月没了。你还不惭愧啊?</p>
<p>享乐。她去看演唱会了，他去唱K了，他们去开房了。都和我无关，因为我要写代码。他们打游戏，他们蜜月旅游，都和我无关，因为我要写代码。钟南山也坚持运动打篮球，每天都跑步。但是人家大年三十上午还在搞研究。没资本还不去学习去写代码？没背景还不去学习去写代码？智商不够还不去学习去写代码？</p>
<p>你穿什么，用什么，开什么，住什么，什么都不算。 你读什么，看什么，想什么，写什么，什么都重要。</p>
<p>你说现在都90后的年代了，你在KFC吃个汉堡，别人在那Code；你在外面风流潇洒，别人还在那Code。别人Code，Code，Code，Code，Code。你连个冒泡算法都要咬半个小时的笔头。</p>
<p>你没事一点脑子都不动，Google还没翻到第二页，你还好意思在CSDN上发帖跟大家说，是JAVA好，还是.NET好？</p>
<p>你智商不高，情商不高，各种商不高；你背景不够，资本不够，各种不够；你还不学习？</p>
<p>你大学傻乎乎的把自己家的全套钥匙送给女朋友，你以为很浪漫很抒情很温柔很韩剧？你现在不好好写写代码，看看书，学习学习，你连一个钥匙串都买不起。</p>
<p>你追求加内特詹姆斯科比麦蒂邓肯霍华德……</p>
<p>你现在不好好写写代码，看看书，学习学习，连一张季前赛门票都买不起。</p>
<p>你想去荷兰，想去普林斯顿，想去各种地方。</p>
<p>你现在不好好写写代码，看看书，学习学习，你就继续想吧。</p>
<p>别人花言巧语追女朋友，别人周末上街大包小包，别人假期飞来飞去。 都不关我事，我要写代码，要多学习。</p>
<p>别人逃课，兼职，游戏，</p>
<p>都不关我的事，我要写代码，要多学习。</p>
<p>你说我没智商，没背景，没资本。 没关系，我要写代码，要多学习。</p>
<p>你说我固执，老套，OUT。</p>
<p>没关系，我要写代码，要多学习。</p>
<p>写代码就是一件要耐的住寂寞放的下欲望舍的得享乐的事。 你好意思那么懒那么不守时那么吃那么玩那么啰哩叭嗦不看书么！</p>
<p>你好意思穿着各种签名在这个QQ那个社交网里面游荡，你好意思整天没事上CSDN？你怎么不看看Facebook的框架？你怎么不研究研究腾讯的负载均衡？</p>
<hr>
<p>本文以上部分都是复制别的地方，觉得写的挺狠的。上文权当自勉吧，君自努力！</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[关于Android中MVP]]></title>
      <url>http://yoursite.com/2016/03/17/%E5%85%B3%E4%BA%8EAndroid%E4%B8%ADMVP/</url>
      <content type="html"></content>
    </entry>
    
    <entry>
      <title><![CDATA[拾起以前学习的好习惯]]></title>
      <url>http://yoursite.com/2016/03/15/%E6%8B%BE%E8%B5%B7%E4%BB%A5%E5%89%8D%E5%AD%A6%E4%B9%A0%E7%9A%84%E5%A5%BD%E4%B9%A0%E6%83%AF/</url>
      <content type="html"><![CDATA[<p>农历新年来写的第一篇，之前生了点小病休息了一段时间，目前重回工作岗位，看到春节后的招聘形势不容乐观，暂时停了自己非分之想，捡起以前自己主动学习的好习惯。继续奋斗，因为我一无所有！</p>
<p>最近看了不少别人的技术，架构，思想。觉得纸上谈来终是浅，很多东西还是需要自己亲自的去实践了才知道，更能够深入理解，自己也是知道开发过程到底哪些东西比较重要，觉得是时候把自己会的东西给串起来，把技术串起来，看到github很多大神都开源了自己的代码，我终于也按耐不住自己蠢蠢欲动的内心，我也要开发一个自己玩的应用，那么今天做为一个起点。</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[2015年终总结]]></title>
      <url>http://yoursite.com/2016/01/03/2015%E5%B9%B4%E7%BB%88%E6%80%BB%E7%BB%93/</url>
      <content type="html"><![CDATA[<p>随手送妹子一枚（我也不知道谁，煎蛋找了张）<br><img src="http://ww1.sinaimg.cn/mw600/66b3de17gw1ezl8ha6ultj20kq0q3mz5.jpg" alt=""><br>今天公司调休，元旦假日的最后一天上班，无聊了一天，想想这也算是2016的第一个工作日，不能这么下去。罢了，回顾一下过去的一年吧，不是文艺青年，随手写点流水账。<br>过去的一年我都干了什么呢？想想。。。去年的这个时候我还在为怎么解决眼前开发问题而苦恼，密谋着过了春节就出来看看，技术还是一只小菜鸟。换了三家公司，搬了一次家，丢了3千RMB，丢了一部荣耀6P，历经千辛万苦和女友走到一起。生活方面还是可以接受，准确的说是女友来北京让我一个人不再在北京单身一人了，除了偶尔的吵架，还算不错的，住宿也是一而再的提升品质。<br>最主要的一年其实还是工作吧，被同事公司的高薪诱惑跳槽，推掉朋友公司offer，入职开始加班，一个人顶起一个项目，各种上线加班，新版本发布，一个月后公司说工资延期一段时间，然后，一段时间过去了，宣布工资还是发不了，还是原来同事（总监）垫付大家一些钱过度，后来员工都扛不住了，找老板已经找不到了，这时候已经过去又一个月了，实在不行了交代大家说公司不行了，然后大家仲裁，陆陆续续又是一个多月，仲裁完毕分了好几个月发工资，估计后续还是跑路。期间谈了一家公司，还是这家公司同事推荐的，感觉可以，但是因为这边总监的原因只能跟着大家一起进入一家刚成立公司，待遇不变，然后就一直呆到现在。<br>好了，流水账就是这些。期间收获还是蛮多的，虽说工资有几个月的没有发，但是这都不是大事，钱没了再挣就是了，关键是我获得了我想要的，我能够独自面对项目解决问题，比起以前有了很大很大很大的成长，重要的事情说三遍！从以前的不自信变得自信，现在我敢大声的说“我可以”！<br>2015年我完成了哪些呢？待遇翻了一翻，技术有了很大提升。<br>有哪些不好的呢？熬夜加班让我感觉身体没以前那么棒了，不能很好的利用每一天，除了技术没有什么其他的爱好让生活丰富多彩一些。<br>2015过完了，总的展望一下2016吧。</p>
<ul>
<li>锻炼身体，锻炼身体，锻炼身体，实在不行就去健身，身体才是本钱，重要的来三遍！！！</li>
<li>技术不要广，深入也是不错的选择</li>
<li>把我机会尝试着更大公司更稳定公司或者更有意思公司，有些小公司的技术氛围实在是太次了，不是我想要的。</li>
<li>学习了解Python</li>
</ul>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Android设计模式之Builder模式]]></title>
      <url>http://yoursite.com/2015/12/24/Android%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90%E4%B9%8BBuilder%E6%A8%A1%E5%BC%8F/</url>
      <content type="html"><![CDATA[<blockquote>
<p>在设计模式中对Builder模式的定义是用于构建复杂对象的一种模式，所构建的对象往往需要多步初始化或赋值才能完成。那么，在实际的开发过程中，我们哪些地方适合用到Builder模式呢？其中使用Builder模式来替代多参数构造函数是一个比较好的实践法则。</p>
<p>Separate the construction of a complex object from its representation so that the same construction process can create different representions.<br>将一个复杂对象的构建与它的表示分离,使得同样的构建过程可以创建不同的表示。</p>
</blockquote>
<p>在Android中建造模式十分常见，以及一些优秀的框架都有使用这种模式。例如<br><strong>AlertDialog使用</strong><br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//显示基本的AlertDialog  </span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">showDialog</span><span class="params">(Context context)</span> </span>&#123;  </span><br><span class="line">        AlertDialog.Builder builder = <span class="keyword">new</span> AlertDialog.Builder(context);  </span><br><span class="line">        builder.setIcon(R.drawable.icon);  </span><br><span class="line">        builder.setTitle(<span class="string">"Title"</span>);  </span><br><span class="line">        builder.setMessage(<span class="string">"Message"</span>);  </span><br><span class="line">        builder.setPositiveButton(<span class="string">"Button1"</span>,  </span><br><span class="line">                <span class="keyword">new</span> DialogInterface.OnClickListener() &#123;  </span><br><span class="line">                    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onClick</span><span class="params">(DialogInterface dialog, <span class="keyword">int</span> whichButton)</span> </span>&#123;  </span><br><span class="line">                        setTitle(<span class="string">"点击了对话框上的Button1"</span>);  </span><br><span class="line">                    &#125;  </span><br><span class="line">                &#125;);  </span><br><span class="line">        builder.setNeutralButton(<span class="string">"Button2"</span>,  </span><br><span class="line">                <span class="keyword">new</span> DialogInterface.OnClickListener() &#123;  </span><br><span class="line">                    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onClick</span><span class="params">(DialogInterface dialog, <span class="keyword">int</span> whichButton)</span> </span>&#123;  </span><br><span class="line">                        setTitle(<span class="string">"点击了对话框上的Button2"</span>);  </span><br><span class="line">                    &#125;  </span><br><span class="line">                &#125;);  </span><br><span class="line">        builder.create().show();  <span class="comment">// 构建AlertDialog， 并且显示</span></span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></p>
<p>源码：(仅有关键部分)<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AlertDialog</span> <span class="keyword">extends</span> <span class="title">Dialog</span> <span class="keyword">implements</span> <span class="title">DialogInterface</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    ...</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="title">AlertDialog</span><span class="params">(Context context, <span class="keyword">int</span> theme)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>(context, theme, <span class="keyword">true</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    AlertDialog(Context context, <span class="keyword">int</span> theme, <span class="keyword">boolean</span> createThemeContextWrapper) &#123;</span><br><span class="line">        <span class="keyword">super</span>(context, resolveDialogTheme(context, theme), createThemeContextWrapper);</span><br><span class="line"></span><br><span class="line">        mWindow.alwaysReadCloseOnTouchAttr();</span><br><span class="line">        mAlert = <span class="keyword">new</span> AlertController(getContext(), <span class="keyword">this</span>, getWindow());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="title">AlertDialog</span><span class="params">(Context context, <span class="keyword">boolean</span> cancelable, OnCancelListener cancelListener)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>(context, resolveDialogTheme(context, <span class="number">0</span>));</span><br><span class="line">        mWindow.alwaysReadCloseOnTouchAttr();</span><br><span class="line">        setCancelable(cancelable);</span><br><span class="line">        setOnCancelListener(cancelListener);</span><br><span class="line">        mAlert = <span class="keyword">new</span> AlertController(context, <span class="keyword">this</span>, getWindow());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">Builder</span> </span>&#123;</span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">final</span> AlertController.AlertParams P;</span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">int</span> mTheme;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="title">Builder</span><span class="params">(Context context)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">this</span>(context, resolveDialogTheme(context, <span class="number">0</span>));</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="title">Builder</span><span class="params">(Context context, <span class="keyword">int</span> theme)</span> </span>&#123;</span><br><span class="line">            P = <span class="keyword">new</span> AlertController.AlertParams(<span class="keyword">new</span> ContextThemeWrapper(</span><br><span class="line">                    context, resolveDialogTheme(context, theme)));</span><br><span class="line">            mTheme = theme;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> Builder <span class="title">setMessage</span><span class="params">(CharSequence message)</span> </span>&#123;</span><br><span class="line">            P.mMessage = message;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">this</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> AlertDialog <span class="title">create</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">final</span> AlertDialog dialog = <span class="keyword">new</span> AlertDialog(P.mContext, mTheme, <span class="keyword">false</span>);</span><br><span class="line">            P.apply(dialog.mAlert);</span><br><span class="line">            dialog.setCancelable(P.mCancelable);</span><br><span class="line">            <span class="keyword">if</span> (P.mCancelable) &#123;</span><br><span class="line">                dialog.setCanceledOnTouchOutside(<span class="keyword">true</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            dialog.setOnCancelListener(P.mOnCancelListener);</span><br><span class="line">            dialog.setOnDismissListener(P.mOnDismissListener);</span><br><span class="line">            <span class="keyword">if</span> (P.mOnKeyListener != <span class="keyword">null</span>) &#123;</span><br><span class="line">                dialog.setOnKeyListener(P.mOnKeyListener);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> dialog;</span><br><span class="line">        &#125;</span><br><span class="line">        ...</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p><strong>UniversalImageLoader</strong><br><strong>使用</strong><br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">DisplayImageOptions options = <span class="keyword">new</span> DisplayImageOptions.Builder()</span><br><span class="line">        .showImageOnLoading(R.drawable.ic_stub) <span class="comment">// resource or drawable</span></span><br><span class="line">        .showImageForEmptyUri(R.drawable.ic_empty) <span class="comment">// resource or drawable</span></span><br><span class="line">        .showImageOnFail(R.drawable.ic_error) <span class="comment">// resource or drawable</span></span><br><span class="line">        .resetViewBeforeLoading(<span class="keyword">false</span>)  <span class="comment">// default</span></span><br><span class="line">        .delayBeforeLoading(<span class="number">1000</span>)</span><br><span class="line">        .cacheInMemory(<span class="keyword">false</span>) <span class="comment">// default</span></span><br><span class="line">        .cacheOnDisk(<span class="keyword">false</span>) <span class="comment">// default</span></span><br><span class="line">        .preProcessor(...)</span><br><span class="line">        .postProcessor(...)</span><br><span class="line">        .extraForDownloader(...)</span><br><span class="line">        .considerExifParams(<span class="keyword">false</span>) <span class="comment">// default</span></span><br><span class="line">        .imageScaleType(ImageScaleType.IN_SAMPLE_POWER_OF_2) <span class="comment">// default</span></span><br><span class="line">        .bitmapConfig(Bitmap.Config.ARGB_8888) <span class="comment">// default</span></span><br><span class="line">        .decodingOptions(...)</span><br><span class="line">        .displayer(<span class="keyword">new</span> SimpleBitmapDisplayer()) <span class="comment">// default</span></span><br><span class="line">        .handler(<span class="keyword">new</span> Handler()) <span class="comment">// default</span></span><br><span class="line">        .build();</span><br><span class="line"></span><br><span class="line">        </span><br><span class="line">        <span class="comment">//显示图片的配置(正常开发不用以上那么多)</span></span><br><span class="line">        DisplayImageOptions options = <span class="keyword">new</span> DisplayImageOptions.Builder()</span><br><span class="line">                .showImageOnLoading(R.drawable.ic_stub)</span><br><span class="line">                .showImageOnFail(R.drawable.ic_error)</span><br><span class="line">                .cacheInMemory(<span class="keyword">true</span>)</span><br><span class="line">                .cacheOnDisk(<span class="keyword">true</span>)</span><br><span class="line">                .bitmapConfig(Bitmap.Config.RGB_565)</span><br><span class="line">                .build();</span><br><span class="line">        </span><br><span class="line">        ImageLoader.getInstance().displayImage(imageUrl, mImageView, options);</span><br></pre></td></tr></table></figure></p>
<h4 id="DisplayImageOptions_u90E8_u5206_u6E90_u7801"><a href="#DisplayImageOptions_u90E8_u5206_u6E90_u7801" class="headerlink" title="DisplayImageOptions部分源码"></a>DisplayImageOptions部分源码</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">DisplayImageOptions</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">int</span> imageResOnLoading;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">int</span> imageResForEmptyUri;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">int</span> imageResOnFail;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">final</span> Drawable imageOnLoading;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">final</span> Drawable imageForEmptyUri;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">final</span> Drawable imageOnFail;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">boolean</span> resetViewBeforeLoading;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">boolean</span> cacheInMemory;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">boolean</span> cacheOnDisk;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">final</span> ImageScaleType imageScaleType;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">final</span> Options decodingOptions;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">int</span> delayBeforeLoading;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">boolean</span> considerExifParams;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">final</span> Object extraForDownloader;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">final</span> BitmapProcessor preProcessor;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">final</span> BitmapProcessor postProcessor;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">final</span> BitmapDisplayer displayer;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">final</span> Handler handler;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">boolean</span> isSyncLoading;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="title">DisplayImageOptions</span><span class="params">(Builder builder)</span> </span>&#123;</span><br><span class="line">    imageResOnLoading = builder.imageResOnLoading;</span><br><span class="line">    imageResForEmptyUri = builder.imageResForEmptyUri;</span><br><span class="line">    imageResOnFail = builder.imageResOnFail;</span><br><span class="line">    imageOnLoading = builder.imageOnLoading;</span><br><span class="line">    imageForEmptyUri = builder.imageForEmptyUri;</span><br><span class="line">    imageOnFail = builder.imageOnFail;</span><br><span class="line">    resetViewBeforeLoading = builder.resetViewBeforeLoading;</span><br><span class="line">    cacheInMemory = builder.cacheInMemory;</span><br><span class="line">    cacheOnDisk = builder.cacheOnDisk;</span><br><span class="line">    imageScaleType = builder.imageScaleType;</span><br><span class="line">    decodingOptions = builder.decodingOptions;</span><br><span class="line">    delayBeforeLoading = builder.delayBeforeLoading;</span><br><span class="line">    considerExifParams = builder.considerExifParams;</span><br><span class="line">    extraForDownloader = builder.extraForDownloader;</span><br><span class="line">    preProcessor = builder.preProcessor;</span><br><span class="line">    postProcessor = builder.postProcessor;</span><br><span class="line">    displayer = builder.displayer;</span><br><span class="line">    handler = builder.handler;</span><br><span class="line">    isSyncLoading = builder.isSyncLoading;</span><br><span class="line">&#125;</span><br><span class="line">...</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">Builder</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> imageResOnLoading = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> imageResForEmptyUri = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> imageResOnFail = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">private</span> Drawable imageOnLoading = <span class="keyword">null</span>;</span><br><span class="line">    <span class="keyword">private</span> Drawable imageForEmptyUri = <span class="keyword">null</span>;</span><br><span class="line">    <span class="keyword">private</span> Drawable imageOnFail = <span class="keyword">null</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">boolean</span> resetViewBeforeLoading = <span class="keyword">false</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">boolean</span> cacheInMemory = <span class="keyword">false</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">boolean</span> cacheOnDisk = <span class="keyword">false</span>;</span><br><span class="line">    <span class="keyword">private</span> ImageScaleType imageScaleType = ImageScaleType.IN_SAMPLE_POWER_OF_2;</span><br><span class="line">    <span class="keyword">private</span> Options decodingOptions = <span class="keyword">new</span> Options();</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> delayBeforeLoading = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">boolean</span> considerExifParams = <span class="keyword">false</span>;</span><br><span class="line">    <span class="keyword">private</span> Object extraForDownloader = <span class="keyword">null</span>;</span><br><span class="line">    <span class="keyword">private</span> BitmapProcessor preProcessor = <span class="keyword">null</span>;</span><br><span class="line">    <span class="keyword">private</span> BitmapProcessor postProcessor = <span class="keyword">null</span>;</span><br><span class="line">    <span class="keyword">private</span> BitmapDisplayer displayer = DefaultConfigurationFactory.createBitmapDisplayer();</span><br><span class="line">    <span class="keyword">private</span> Handler handler = <span class="keyword">null</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">boolean</span> isSyncLoading = <span class="keyword">false</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">Builder</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        decodingOptions.inPurgeable = <span class="keyword">true</span>;</span><br><span class="line">        decodingOptions.inInputShareable = <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span><br><span class="line">     * Stub image will be displayed in &#123;<span class="doctag">@link</span> com.nostra13.universalimageloader.core.imageaware.ImageAware</span><br><span class="line">     * image aware view&#125; during image loading</span><br><span class="line">     *</span><br><span class="line">     * <span class="doctag">@param</span> imageRes Stub image resource</span><br><span class="line">     * <span class="doctag">@deprecated</span> Use &#123;<span class="doctag">@link</span> #showImageOnLoading(int)&#125; instead</span><br><span class="line">     */</span></span><br><span class="line">    <span class="annotation">@Deprecated</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Builder <span class="title">showStubImage</span><span class="params">(<span class="keyword">int</span> imageRes)</span> </span>&#123;</span><br><span class="line">        imageResOnLoading = imageRes;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span><br><span class="line">     * Incoming image will be displayed in &#123;<span class="doctag">@link</span> com.nostra13.universalimageloader.core.imageaware.ImageAware</span><br><span class="line">     * image aware view&#125; during image loading</span><br><span class="line">     *</span><br><span class="line">     * <span class="doctag">@param</span> imageRes Image resource</span><br><span class="line">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Builder <span class="title">showImageOnLoading</span><span class="params">(<span class="keyword">int</span> imageRes)</span> </span>&#123;</span><br><span class="line">        imageResOnLoading = imageRes;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/** Builds configured &#123;<span class="doctag">@link</span> DisplayImageOptions&#125; object */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> DisplayImageOptions <span class="title">build</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> DisplayImageOptions(<span class="keyword">this</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    ...</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>它比AlertDialog实现更为简单一点，直接将属性定义在Builder的成员变量中，然后将Builder对象返回给DisplayImageOptions中直接进行赋值，这样做的话，将初始化对象的复杂逻辑全部交给了Builder类，而使我们需要的DisplayImageOptions显得非常的干净,功能也相当的简洁明了</p>
<p>本文参考：<br>1.<a href="http://www.cnblogs.com/moonz-wu/archive/2011/01/11/1932473.html" target="_blank" rel="external">Builder模式在Java中的应用</a><br>2.<a href="http://blog.csdn.net/bboyfeiyu/article/details/24375481?utm_source=tuicool&amp;utm_medium=referral" target="_blank" rel="external">Android源码分析之Builder模式</a></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[技术琐碎]]></title>
      <url>http://yoursite.com/2015/12/23/%E6%8A%80%E6%9C%AF%E7%90%90%E7%A2%8E/</url>
      <content type="html"><![CDATA[<p>此文仅仅纪录开发的琐碎，事无大小，可能大多数都会但是需要注意的地方纪录</p>
<h3 id="Android__u81EA_u5B9A_u4E49_u5C5E_u6027"><a href="#Android__u81EA_u5B9A_u4E49_u5C5E_u6027" class="headerlink" title="Android 自定义属性"></a>Android 自定义属性</h3><p>  有时候android传统的页面布局不足以满足我们的需求，常常需要自己定义view，通常继承View，然后重写构造方法以及onDraw等函数，再具体实现自己定义的复杂view。我们知道在给控件赋属性时，通常使用的是android系统自带的属性，比如 android:layout_height=”wrap_content”，除此之外，我们亦可以自己定义属性，这样在使用的时候我们就可以使用形如 myapp:myTextSize=”20sp”的方式了，步骤大致如下：<br>  1.在项目文件res/value下面创建一个attr.xml文件，该文件中包含若干个attr集合<br>  <figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="pi">&lt;?xml version="1.0" encoding="utf-8"?&gt;</span>  </span><br><span class="line"><span class="tag">&lt;<span class="title">resources</span>&gt;</span>  </span><br><span class="line">    <span class="tag">&lt;<span class="title">declare-styleable</span> <span class="attribute">name</span>=<span class="value">"MyView"</span>&gt;</span>  </span><br><span class="line">        <span class="tag">&lt;<span class="title">attr</span> <span class="attribute">name</span>=<span class="value">"myTextSize"</span> <span class="attribute">format</span>=<span class="value">"dimension"</span>/&gt;</span>  </span><br><span class="line">        <span class="tag">&lt;<span class="title">attr</span> <span class="attribute">name</span>=<span class="value">"myColor"</span> <span class="attribute">format</span>=<span class="value">"color"</span>/&gt;</span>  </span><br><span class="line">    <span class="tag">&lt;/<span class="title">declare-styleable</span>&gt;</span>  </span><br><span class="line"><span class="tag">&lt;/<span class="title">resources</span>&gt;</span></span><br></pre></td></tr></table></figure></p>
<p>其中resource是跟标签，可以在里面定义若干个declare-styleable，<declare-styleable name="MyView">中name定义了变量的名称，下面可以再自定义多个属性，针对<attr name="myTextSize" format="dimension">来说，其属性的名称为”myTextSize”，format指定了该属性类型为dimension，只能表示字体的大小。<br>format还可以指定其他的类型比如;<br>reference   表示引用，参考某一资源ID<br>string   表示字符串<br>color   表示颜色值<br>dimension   表示尺寸值<br>boolean   表示布尔值<br>integer   表示整型值<br>float   表示浮点值<br>fraction   表示百分数<br>enum   表示枚举值<br>flag   表示位运算<br>2.在使用到该自定义view的布局文件中键入如下的一行：<br>绿色是自己定义属性的前缀名字，粉色是项目的包名，这样一来，在我们自己定义的view的属性中，就可以使用自己在attr中定义的属性啦，例如：<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="title">LinearLayout</span> <span class="attribute">xmlns:android</span>=<span class="value">"http://schemas.android.com/apk/res/android"</span>  </span><br><span class="line">    <span class="attribute">xmlns:myapp</span>=<span class="value">"http://schemas.android.com/apk/res/com.eyu.attrtextdemo"</span>  </span><br><span class="line">    <span class="attribute">xmlns:tools</span>=<span class="value">"http://schemas.android.com/tools"</span>  </span><br><span class="line">    <span class="attribute">android:layout_width</span>=<span class="value">"match_parent"</span>  </span><br><span class="line">    <span class="attribute">android:layout_height</span>=<span class="value">"match_parent"</span>  </span><br><span class="line">    <span class="attribute">android:orientation</span>=<span class="value">"vertical"</span>  </span><br><span class="line">    <span class="attribute">tools:context</span>=<span class="value">".MainActivity"</span> &gt;</span>  </span><br><span class="line">  </span><br><span class="line">    <span class="tag">&lt;<span class="title">TextView</span>  </span><br><span class="line">        <span class="attribute">android:layout_width</span>=<span class="value">"wrap_content"</span>  </span><br><span class="line">        <span class="attribute">android:layout_height</span>=<span class="value">"wrap_content"</span>  </span><br><span class="line">        <span class="attribute">android:text</span>=<span class="value">"@string/hello_world"</span> /&gt;</span>  </span><br><span class="line">    <span class="tag">&lt;<span class="title">com.xxx.MyView</span>  </span><br><span class="line">        <span class="attribute">android:layout_height</span>=<span class="value">"wrap_content"</span>  </span><br><span class="line">        <span class="attribute">android:layout_width</span>=<span class="value">"wrap_content"</span>  </span><br><span class="line">        <span class="attribute">myapp:myTextSize</span>=<span class="value">"20sp"</span>  </span><br><span class="line">        <span class="attribute">myapp:myColor</span>=<span class="value">"#324243"</span>/&gt;</span>  </span><br><span class="line">  </span><br><span class="line"><span class="tag">&lt;/<span class="title">LinearLayout</span>&gt;</span></span><br></pre></td></tr></table></figure></attr></declare-styleable></p>
<p>3.在自定义view的代码中引入自定义属性，修改构造函数<br>context通过调用obtainStyledAttributes方法来获取一个TypeArray，然后由该TypeArray来对属性进行设置<br>obtainStyledAttributes方法有三个，我们最常用的是有一个参数的obtainStyledAttributes(int[] attrs)，其参数直接styleable中获得<br>TypedArray a = context.obtainStyledAttributes(attrs,R.styleable.MyView);<br><strong>调用结束后务必调用recycle()方法，否则这次的设定会对下次的使用造成影响</strong><br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyView</span> <span class="keyword">extends</span> <span class="title">View</span></span>&#123;  </span><br><span class="line">    <span class="keyword">public</span> Paint paint;  </span><br><span class="line">  </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">MyView</span><span class="params">(Context context, AttributeSet attrs)</span> </span>&#123;  </span><br><span class="line">        <span class="keyword">super</span>(context, attrs);  </span><br><span class="line">        paint = <span class="keyword">new</span> Paint();  </span><br><span class="line">          </span><br><span class="line">        TypedArray a = context.obtainStyledAttributes(attrs,R.styleable.MyView);      </span><br><span class="line">        <span class="keyword">int</span> textColor = a.getColor(R.styleable.MyView_myColor, <span class="number">003344</span>);  </span><br><span class="line">        <span class="keyword">float</span> textSize = a.getDimension(R.styleable.MyView_myTextSize, <span class="number">33</span>);  </span><br><span class="line">        paint.setTextSize(textSize);  </span><br><span class="line">        paint.setColor(textColor);  </span><br><span class="line">        a.recycle();  </span><br><span class="line">    &#125;  </span><br><span class="line">  </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">MyView</span><span class="params">(Context context)</span> </span>&#123;  </span><br><span class="line">        <span class="keyword">super</span>(context);  </span><br><span class="line">        <span class="comment">// TODO Auto-generated constructor stub  </span></span><br><span class="line">    &#125;  </span><br><span class="line">      </span><br><span class="line">    <span class="annotation">@Override</span>   www.2cto.<span class="function">com</span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onDraw</span><span class="params">(Canvas canvas)</span> </span>&#123;  </span><br><span class="line">        <span class="comment">// TODO Auto-generated method stub  </span></span><br><span class="line">        <span class="keyword">super</span>.onDraw(canvas);     </span><br><span class="line">        paint.setStyle(Style.FILL);  </span><br><span class="line">        canvas.drawText(<span class="string">"aaaaaaa"</span>, <span class="number">10</span>, <span class="number">50</span>, paint);  </span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[深入了解View（三）]]></title>
      <url>http://yoursite.com/2015/12/23/%E6%B7%B1%E5%85%A5%E4%BA%86%E8%A7%A3View%EF%BC%88%E4%B8%89%EF%BC%89/</url>
      <content type="html"><![CDATA[<h3 id="u5173_u4E8E_u81EA_u5B9A_u4E49View_u7684_u5B9E_u73B0"><a href="#u5173_u4E8E_u81EA_u5B9A_u4E49View_u7684_u5B9E_u73B0" class="headerlink" title="关于自定义View的实现"></a>关于自定义View的实现</h3><p>自定义View的实现方式大概可以分为三种，自绘控件、组合控件、以及继承控件</p>
<h4 id="u81EA_u7ED8_u63A7_u4EF6"><a href="#u81EA_u7ED8_u63A7_u4EF6" class="headerlink" title="自绘控件"></a>自绘控件</h4><p>onDraw()方法绘制订制逻辑<br>invalidate()  重新绘制视图</p>
<h4 id="u7EC4_u5408_u63A7_u4EF6"><a href="#u7EC4_u5408_u63A7_u4EF6" class="headerlink" title="组合控件"></a>组合控件</h4><blockquote>
<p>组合控件的意思就是，我们并不需要自己去绘制视图上显示的内容，而只是用系统原生的控件就好了，但我们可以将几个系统原生的控件组合到一起，这样创建出的控件就被称为组合控件。</p>
</blockquote>
<p>举个例子来说，标题栏就是个很常见的组合控件</p>
<h4 id="u7EE7_u627F_u63A7_u4EF6"><a href="#u7EE7_u627F_u63A7_u4EF6" class="headerlink" title="继承控件"></a>继承控件</h4><blockquote>
<p>继承控件的意思就是，我们并不需要自己重头去实现一个控件，只需要去继承一个现有的控件，然后在这个控件上增加一些新的功能，就可以形成一个自定义的控件了。这种自定义控件的特点就是不仅能够按照我们的需求加入相应的功能，还可以保留原生控件的所有功能</p>
</blockquote>
<p>因为不善于总结和文字说明只能借鉴@郭林大神的文章，来学习一下。</p>
<p>参考:<a href="http://blog.csdn.net/guolin_blog/article/details/17357967" target="_blank" rel="external">Android自定义View的实现方法，带你一步步深入了解View(四)</a></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[深入了解View（二）]]></title>
      <url>http://yoursite.com/2015/12/23/%E6%B7%B1%E5%85%A5%E4%BA%86%E8%A7%A3View%EF%BC%88%E4%BA%8C%EF%BC%89/</url>
      <content type="html"><![CDATA[<p>我们每天写代码基本都是在和View打交道，任何一个控件或者布局其实都是直接或者间接的继承View类。</p>
<ul>
<li>View<ul>
<li>TextView<ul>
<li>Button</li>
<li>EditText</li>
<li>CheckedTextView</li>
<li>…<br>但是这玩意怎么绘制到屏幕上呢，其实她们都是经过科学绘制流程后才能显示出来的<br>onMeasure() -&gt; onLayout -&gt; onDraw()</li>
</ul>
</li>
</ul>
</li>
</ul>
<p>深究代码我没有完全看，有兴趣可以自己阅读</p>
<p>参考：<a href="http://blog.csdn.net/guolin_blog/article/details/16330267" target="_blank" rel="external">Android视图绘制流程完全解析，带你一步步深入了解View(二)</a></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[深入了解View之LayoutInflater（一）]]></title>
      <url>http://yoursite.com/2015/12/23/%E6%B7%B1%E5%85%A5%E4%BA%86%E8%A7%A3View/</url>
      <content type="html"><![CDATA[<p>关于LayoutInflater，一点都不陌生经常使用。<br>两种方式使用：</p>
<ul>
<li><p>第一种</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">LayoutInflater layoutInflater = LayoutInflater.from(context);</span><br></pre></td></tr></table></figure>
</li>
<li><p>第二种</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">LayoutInflater layoutInflater = (LayoutInflater) context</span><br><span class="line">        .getSystemService(Context.LAYOUT_INFLATER_SERVICE);</span><br></pre></td></tr></table></figure>
</li>
</ul>
<p>之后操作就是调用inflate()方法加在布局了<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">layoutInflater.inflate(R.layout.activity_main, root);</span><br></pre></td></tr></table></figure></p>
<p>第一个参数就是要加载的布局id，第二个参数是指给该布局的外部再嵌套一层父布局，如果不需要就直接传null<br>例：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">setContentView(R.layout.activity_main);</span><br><span class="line">mainLayout = (LinearLayout) findViewById(R.id.main_layout);</span><br><span class="line">LayoutInflater layoutInflater = LayoutInflater.from(<span class="keyword">this</span>);</span><br><span class="line">View buttonLayout = layoutInflater.inflate(R.layout.button_layout, <span class="keyword">null</span>);</span><br><span class="line">mainLayout.addView(buttonLayout);</span><br></pre></td></tr></table></figure></p>
<hr>
<h5 id="u67E5_u770B_u6E90_u7801_u77E5_u5176_u6240_u7136"><a href="#u67E5_u770B_u6E90_u7801_u77E5_u5176_u6240_u7136" class="headerlink" title="查看源码知其所然"></a>查看源码知其所然</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> View <span class="title">inflate</span><span class="params">(XmlPullParser parser, ViewGroup root, <span class="keyword">boolean</span> attachToRoot)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">synchronized</span> (mConstructorArgs) &#123;</span><br><span class="line">            Trace.traceBegin(Trace.TRACE_TAG_VIEW, <span class="string">"inflate"</span>);</span><br><span class="line"></span><br><span class="line">            <span class="keyword">final</span> AttributeSet attrs = Xml.asAttributeSet(parser);</span><br><span class="line">            Context lastContext = (Context)mConstructorArgs[<span class="number">0</span>];</span><br><span class="line">            mConstructorArgs[<span class="number">0</span>] = mContext;</span><br><span class="line">            View result = root;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                <span class="comment">// Look for the root node.</span></span><br><span class="line">                <span class="keyword">int</span> type;</span><br><span class="line">                <span class="keyword">while</span> ((type = parser.next()) != XmlPullParser.START_TAG &amp;&amp;</span><br><span class="line">                        type != XmlPullParser.END_DOCUMENT) &#123;</span><br><span class="line">                    <span class="comment">// Empty</span></span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                <span class="keyword">if</span> (type != XmlPullParser.START_TAG) &#123;</span><br><span class="line">                    <span class="keyword">throw</span> <span class="keyword">new</span> InflateException(parser.getPositionDescription()</span><br><span class="line">                            + <span class="string">": No start tag found!"</span>);</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                <span class="keyword">final</span> String name = parser.getName();</span><br><span class="line">                </span><br><span class="line">                <span class="keyword">if</span> (DEBUG) &#123;</span><br><span class="line">                    System.out.println(<span class="string">"**************************"</span>);</span><br><span class="line">                    System.out.println(<span class="string">"Creating root view: "</span></span><br><span class="line">                            + name);</span><br><span class="line">                    System.out.println(<span class="string">"**************************"</span>);</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                <span class="keyword">if</span> (TAG_MERGE.equals(name)) &#123;</span><br><span class="line">                    <span class="keyword">if</span> (root == <span class="keyword">null</span> || !attachToRoot) &#123;</span><br><span class="line">                        <span class="keyword">throw</span> <span class="keyword">new</span> InflateException(<span class="string">"&lt;merge /&gt; can be used only with a valid "</span></span><br><span class="line">                                + <span class="string">"ViewGroup root and attachToRoot=true"</span>);</span><br><span class="line">                    &#125;</span><br><span class="line"></span><br><span class="line">                    rInflate(parser, root, attrs, <span class="keyword">false</span>);</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    <span class="comment">// Temp is the root view that was found in the xml</span></span><br><span class="line">                    View temp;</span><br><span class="line">                    <span class="keyword">if</span> (TAG_1995.equals(name)) &#123;</span><br><span class="line">                        temp = <span class="keyword">new</span> BlinkLayout(mContext, attrs);</span><br><span class="line">                    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                        temp = createViewFromTag(root, name, attrs);</span><br><span class="line">                    &#125;</span><br><span class="line"></span><br><span class="line">                    ViewGroup.LayoutParams params = <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line">                    <span class="keyword">if</span> (root != <span class="keyword">null</span>) &#123;</span><br><span class="line">                        <span class="keyword">if</span> (DEBUG) &#123;</span><br><span class="line">                            System.out.println(<span class="string">"Creating params from root: "</span> +</span><br><span class="line">                                    root);</span><br><span class="line">                        &#125;</span><br><span class="line">                        <span class="comment">// Create layout params that match root, if supplied</span></span><br><span class="line">                        params = root.generateLayoutParams(attrs);</span><br><span class="line">                        <span class="keyword">if</span> (!attachToRoot) &#123;</span><br><span class="line">                            <span class="comment">// Set the layout params for temp if we are not</span></span><br><span class="line">                            <span class="comment">// attaching. (If we are, we use addView, below)</span></span><br><span class="line">                            temp.setLayoutParams(params);</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line"></span><br><span class="line">                    <span class="keyword">if</span> (DEBUG) &#123;</span><br><span class="line">                        System.out.println(<span class="string">"-----&gt; start inflating children"</span>);</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="comment">// Inflate all children under temp</span></span><br><span class="line">                    rInflate(parser, temp, attrs, <span class="keyword">true</span>);</span><br><span class="line">                    <span class="keyword">if</span> (DEBUG) &#123;</span><br><span class="line">                        System.out.println(<span class="string">"-----&gt; done inflating children"</span>);</span><br><span class="line">                    &#125;</span><br><span class="line"></span><br><span class="line">                    <span class="comment">// We are supposed to attach all the views we found (int temp)</span></span><br><span class="line">                    <span class="comment">// to root. Do that now.</span></span><br><span class="line">                    <span class="keyword">if</span> (root != <span class="keyword">null</span> &amp;&amp; attachToRoot) &#123;</span><br><span class="line">                        root.addView(temp, params);</span><br><span class="line">                    &#125;</span><br><span class="line"></span><br><span class="line">                    <span class="comment">// Decide whether to return the root that was passed in or the</span></span><br><span class="line">                    <span class="comment">// top view found in xml.</span></span><br><span class="line">                    <span class="keyword">if</span> (root == <span class="keyword">null</span> || !attachToRoot) &#123;</span><br><span class="line">                        result = temp;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">            &#125; <span class="keyword">catch</span> (XmlPullParserException e) &#123;</span><br><span class="line">                InflateException ex = <span class="keyword">new</span> InflateException(e.getMessage());</span><br><span class="line">                ex.initCause(e);</span><br><span class="line">                <span class="keyword">throw</span> ex;</span><br><span class="line">            &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                InflateException ex = <span class="keyword">new</span> InflateException(</span><br><span class="line">                        parser.getPositionDescription()</span><br><span class="line">                        + <span class="string">": "</span> + e.getMessage());</span><br><span class="line">                ex.initCause(e);</span><br><span class="line">                <span class="keyword">throw</span> ex;</span><br><span class="line">            &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">                <span class="comment">// Don't retain static reference on context.</span></span><br><span class="line">                mConstructorArgs[<span class="number">0</span>] = lastContext;</span><br><span class="line">                mConstructorArgs[<span class="number">1</span>] = <span class="keyword">null</span>;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            Trace.traceEnd(Trace.TRACE_TAG_VIEW);</span><br><span class="line"></span><br><span class="line">            <span class="keyword">return</span> result;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>
<p> Inflate a new view hierarchy from the specified XML node. Throws {@link InflateException} if there is an error.<br> 查看doc可以看出不管如何最终会进入inflate()方法。<br> 其实就是使用pull解析布局xml<br> 里边有个这货<br> <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">View temp;</span><br><span class="line">                <span class="keyword">if</span> (TAG_1995.equals(name)) &#123;</span><br><span class="line">                    temp = <span class="keyword">new</span> BlinkLayout(mContext, attrs);</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    temp = createViewFromTag(root, name, attrs);</span><br><span class="line">                &#125;</span><br></pre></td></tr></table></figure></p>
<p> createViewFromTag()这个方法获取View对象<br>到此LayoutInflater的工作原理和流程结束，当然里边前套的还有其他方法不做一一列举。<br>哈，今天图放在后边…<br><img src="/imgs/2015-12-23/12-23.png" alt=""></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[整理下最近在做的事情]]></title>
      <url>http://yoursite.com/2015/12/22/%E6%95%B4%E7%90%86%E4%B8%8B%E6%9C%80%E8%BF%91%E5%9C%A8%E5%81%9A%E7%9A%84%E4%BA%8B%E6%83%85/</url>
      <content type="html"><![CDATA[<p>话不多说，先来张图占地方哈<br><img src="/imgs/2015-12-22/fengjing.png" alt=""><br>最近项目一直不忙，so，看了些东西整理了一些知识，巩固了一些技术点。如下。。。。。。</p>
<ul>
<li>整合项目，加入Material Design风格（包括CardView,触感等)</li>
<li>加入新的框架  </li>
</ul>
<ul>
<li>网络框架 OKHTTP</li>
<li>内存监测库 leakcanary-android</li>
<li>图片加载库 picasso，Fresco</li>
<li>Design库 design</li>
<li>依赖注入库 Butterknife</li>
<li>百分比类库</li>
</ul>
<ul>
<li>优化项目框架</li>
</ul>
<ul>
<li>使用更为合理的架构MVP</li>
<li>解耦组件间通信 EventBus</li>
<li>复杂场景使用RxAndroid<br>等等一些优秀的框架</li>
</ul>
<hr>
<h4 id="u5FC5_u5907_uFF1A_uFF08_u867D_u8BF4_u90FD_u4F1A_uFF0C_u4F46_u662F_u6BD5_u7ADF_u8FD8_u662F_u8981_u518D_u6DF1_u5165_u4E00_u4E9B_uFF09"><a href="#u5FC5_u5907_uFF1A_uFF08_u867D_u8BF4_u90FD_u4F1A_uFF0C_u4F46_u662F_u6BD5_u7ADF_u8FD8_u662F_u8981_u518D_u6DF1_u5165_u4E00_u4E9B_uFF09" class="headerlink" title="必备：（虽说都会，但是毕竟还是要再深入一些）"></a>必备：（虽说都会，但是毕竟还是要再深入一些）</h4><ul>
<li>View的绘制流程</li>
<li>事件的分发机制</li>
<li>高效处理Bitmap</li>
<li>消息队列机制</li>
<li>进程间通信</li>
<li>binder</li>
</ul>
<h5 id="u5185_u5B58_u4F18_u5316_u65B9_u6848"><a href="#u5185_u5B58_u4F18_u5316_u65B9_u6848" class="headerlink" title="内存优化方案"></a>内存优化方案</h5><ul>
<li>界面绘制优化</li>
<li>未完成。。。//TODO</li>
</ul>
<h5 id="u5C4F_u5E55_u9002_u914D_u65B9_u6848"><a href="#u5C4F_u5E55_u9002_u914D_u65B9_u6848" class="headerlink" title="屏幕适配方案"></a>屏幕适配方案</h5><p>//TODO </p>
<h5 id="Gradle_u591A_u6E20_u9053_u6253_u5305_uFF08Gradle_u5B66_u4E60_uFF09"><a href="#Gradle_u591A_u6E20_u9053_u6253_u5305_uFF08Gradle_u5B66_u4E60_uFF09" class="headerlink" title="Gradle多渠道打包（Gradle学习）"></a>Gradle多渠道打包（Gradle学习）</h5><h5 id="u5355_u5143_u6D4B_u8BD5"><a href="#u5355_u5143_u6D4B_u8BD5" class="headerlink" title="单元测试"></a>单元测试</h5><hr>
<h4 id="u5B66_u4E60__uFF08_u5DE5_u4F5C_u4E2D_u63A5_u89E6_u4E0D_u591A_uFF0C_u8981_u81EA_u5DF1_u52A8_u624B_u4E86_u89E3_u4E0B_uFF09"><a href="#u5B66_u4E60__uFF08_u5DE5_u4F5C_u4E2D_u63A5_u89E6_u4E0D_u591A_uFF0C_u8981_u81EA_u5DF1_u52A8_u624B_u4E86_u89E3_u4E0B_uFF09" class="headerlink" title="学习 （工作中接触不多，要自己动手了解下）"></a>学习 （工作中接触不多，要自己动手了解下）</h4><ul>
<li>JNI   AIDL    </li>
<li>NDK 开发学习</li>
<li>逆向工程</li>
<li>多向Github提交代码，向jcenter提交</li>
</ul>
<hr>
<p>这篇文章还能写好多好多。。。会接着补充,睡觉去了最近总是休息不够。。。尽量提高自己吧做一名合格的搞基攻城狮。。。。。。</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Mac快捷键整理]]></title>
      <url>http://yoursite.com/2015/12/17/Mac%E4%B8%8BAS%E5%BF%AB%E6%8D%B7%E9%94%AE%E6%95%B4%E7%90%86/</url>
      <content type="html"><![CDATA[<p>从Android Stuido 第一个版本出来就已经使用也就是14年时候，当时觉得还不是特别好用，时常更新。一直觉得仅仅只是IDE而已包括以前使用Intellij idea，觉得好帅，可是还是因为从eclipse转变过来好多快捷键一时间难以习惯so中途还是放弃。目前Stuido开发版已经出到2.0自己也是在之前几个月切换到Stuido开发环境中，自己也要紧跟技术时代潮流，谷歌大法早已经告知大家ADT不在维护升级。。扯远了，把最近整理的AS快捷键记录一下。</p>
<p>来张图，给那个该退役的家伙致个敬。<br><img src="/imgs/2015-12-16/kebi.png" alt=""><br>ctrl+H  查看类继承关系</p>
<p>ctrl+f12<br>此快捷键可以调出当前文件的大纲，并通过模糊匹配快速跳转至指定的方法。<br>勾选上“show anonymous classes”后其功能相当于Eclipse中的ctrl+o</p>
<p>shift+f6<br>重命名变量或者方法名。重构神技。</p>
<p>代码高亮查找（向下）：Cmd + G<br>           （向上）：Shift + Cmd + G</p>
<p>Build and run ：CTRL + R</p>
<p>格式化代码：OPTION + CMD + L</p>
<p>查找工程内类文件：CMD + 0 </p>
<p>Generate method： CMD + N</p>
<p>删除行：CMD + X<br>复制行：CMD + D</p>
<p>返回上一次编辑位置：CMD + [<br>前进到上一次编辑位置：CMD + ]</p>
<p>导入包，自动修正：ALT + ENTER</p>
<p>快捷覆写方法：CTRL + O</p>
<p>清除无效引用：ALT + CTRL + O</p>
<p>相当于 Eclipse 的 Ctrl + h： CMD + SHIFT + F</p>
<p>暂时想到的这么多，再想到了或者再用别的，在添加。</p>
<hr>
<p>晚上再来篇EventBus使用系列，网上你抄我，我转载你的没什么劲，我就把我的使用记录下来不图什么</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[开博第一篇]]></title>
      <url>http://yoursite.com/2015/12/14/%E5%BC%80%E5%8D%9A%E7%AC%AC%E4%B8%80%E7%AF%87/</url>
      <content type="html"><![CDATA[<p><img src="/imgs/2015-12-14/jiansheng.png" alt=""></p>
<hr>
<p>今年告别了dota，祭张图…</p>
<p>删除掉自带的Hello World</p>
<p>我这个懒人终于也在2015年末的时候借助外力搭建了自己的小博客，这个想法是从去年也就是2014年就有的，此前也有在博客园和CSDN写过一小段博客，汗颜啊…因为种种原因（其实还是自己比较懒）没有坚持下去。<br>从最早接触coding，就是混迹于各种博客，围观各种大神的神作，期间自己也是成长了不少。从最开始的小小实习生到后来自己的独当一面，抛开其他原因，网络上大神的技术博客可以说对我的影响还是相当大的！</p>
<p>so！最终心底的这个想法压抑不住了，遂在某天凌晨两点搭建了自己的小博客。</p>
<p>不是很会使用markdown，以后慢慢熟练吧。</p>
<p>开这个博客的目的呢：</p>
<ul>
<li>坚持做件事情</li>
<li>记录下来自己成长的印记</li>
<li>沉淀技术且日积月累的记录下来</li>
<li>当然＊@＊做为改变世界的程序员提升B格 哈哈😄</li>
</ul>
<p>希望自己能坚持下去做点自己真正想做的事情吧。</p>
]]></content>
    </entry>
    
  
  
</search>
